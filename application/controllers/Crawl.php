<?php
defined('BASEPATH') OR exit('No direct script access allowed');

/**
 * Crawl class
 *
 * Copyright (c) CIBoard <www.ciboard.co.kr>
 *
 * @author CIBoard (develop@ciboard.co.kr)
 */

/**
 * 메인 페이지를 담당하는 controller 입니다.
 */


require_once FCPATH . '/plugin/google/cloud-vision/vendor/autoload.php';
use Google\Cloud\Vision\V1\ImageAnnotatorClient;

require_once FCPATH . '/plugin/google/translate/vendor/autoload.php';

# Imports the Google Cloud client library
use Google\Cloud\Translate\TranslateClient;

require_once FCPATH . '/plugin/google/natural-language/vendor/autoload.php';
use Google\Cloud\Language\LanguageClient;

class Crawl extends CB_Controller
{

    /**
     * 모델을 로딩합니다
     */
    protected $models = array('Post','Post_link','Post_extra_vars','Post_meta','Crawl','Crawl_link', 'Crawl_file','Crawl_tag','Vision_api_label','Board_crawl','Cmall_item','Cmall_category', 'Cmall_category_rel','Board_category','Board_group_category','Cmall_brand');

    protected $imageAnnotator = null;
    protected $translate = null;


    // protected $tag_word = array(
    //                         'sesame street' => array('sesame','sst','세서미'),
    //                         '빕' => array('빕','bib'),
    //                         '빅버드' => array('빅버드'),
    //                         '양털' => array('fleece','양털'),
    //                         '레트로' => array('레트로','retro','복고'),
    //                         );

    protected $tag_word = array(
                            '1+1',
'1등급원료',
'2in1',
'3mm',
'3개월 이후',
'3개월이전',
'4개월 이후',
'4개월이전',
'6년근 홍삼',
'AAFCO',
'Aboutmeal',
'ACANA',
'Acrylic',
'adult',
'adventure light',
'Ahead',
'ALCOTT',
'ALIENFLEX',
'ALL BARKS',
'Alloy pin',
'ALONG',
'AMEVA',
'ANDBLANK',
'Anti bug',
'Apple',
'Australia',
'autumn',
'Avocado dog bib',
'AWESOME PAWSOME',
'Banana',
'BARKER',
'barky',
'BEATTO',
'BEAUTY',
'BECO PETS',
'beef',
'BEST',
'BETTERS',
'Bichon',
'BIG DOG',
'BIGGIE',
'BIKIT',
'birthday',
'BITE ME',
'BLA',
'BLACK MAYONNAISE',
'blueberry',
'BOKSEUL PET',
'Bone',
'BONJOUR TOUTOU',
'BRC standard',
'BRC인증',
'BRIDGE DOG',
'BROOKLYN PET CO',
'bubble gum',
'Bug hunter',
'Bug hunter spray',
'BUILD A PUPPY',
'burgundy',
'burgundyred',
'BUSH & BIRCH',
'BYBONG',
'Calendula',
'camou',
'Camouflage',
'candy',
'CANIOTIC',
'Carmine',
'CARMINE PROJECT',
'Carrot',
'Cashmere',
'CATSMORY',
'CELTIC',
'ceramic',
'chamomile',
'Cherry',
'Chew',
'chicken',
'chinos',
'Chips',
'CHOANDKANG',
'CHOP&CHOP',
'christmas',
'cinnamon',
'COCO',
'Coconut',
'coconut milk',
'COMELL',
'cookie',
'Cool',
'COOLING',
'cordura',
'COSAPET',
'COTE',
'COTE A COTE',
'CREAMY STUDIO',
'cube',
'custom',
'cyan',
'D.I.Y',
'darkblue',
'darkgreen',
'Darkkhaki',
'Darkolive',
'DDOANG',
'DENNY FIELD',
'DHA',
'DHARMA DOG KARMA CAT',
'Diagonal line',
'dinning',
'DIY',
'DL메티오닌',
'DNA',
'DOCTOR BY',
'DOGUS',
'DR.WELLEAT',
'DUIT',
'Dupont',
'E0등급',
'EARLY MORNING',
'EARTHBATH',
'EDENCHIEN',
'ELEFUK',
'emergency',
'EPA',
'ES클리어',
'EVAJUNIE',
'ewg',
'ewg Green',
'EWG 그린등급',
'EWG등급',
'EZYDOG',
'FAMILY LAP',
'FARM COMPANY',
'faux fur',
'FDA',
'FEDIAF',
'FIBE RPERFUME',
'fillet',
'firebrick',
'FITPET',
'flannel',
'Flip',
'FLO',
'FOODY WORM',
'FOREVERYBARI',
'FORTHGLADE',
'fresh',
'Fruits',
'Fruits Chips',
'FUR SITTER',
'GENTLE PUP',
'GERYPINK',
'glen',
'glencheck',
'GMO FREE',
'Goat',
'GOLD RONY',
'gradient',
'GRANDMA LUCY',
'grape',
'green',
'GREENIES',
'Grey',
'GRO',
'Guard',
'HACCP',
'HAMMOCK',
'HAVIE AND REVO',
'Hawaiian',
'HERBSMITH',
'herringbone',
'HEY JERRY',
'HONEST MEAL',
'houndstooth',
'HOWLGO',
'HOWLPOT',
'HUBBA',
'HUGO & CELINE',
'Humangrade',
'HUPS',
'HURTTA',
'HUTS AND BAY',
'Ice cream',
'iris',
'jam',
'Jelly',
'Joint',
'kale',
'Kangaroo',
'KINGJAMBO',
'KOKE',
'KOLDING',
'Krunk',
'Lambswool',
'lavender',
'Lucra',
'L카르니틴',
'Made in Italy',
'made in korea',
'Made in USA',
'madras',
'Mango',
'Margiela',
'MCT',
'MERINO',
'Mint',
'MIX',
'MSM',
'Muffin',
'mustard',
'muzzle',
'Natural boar britles',
'NHV',
'Nose work',
'Oatmeal',
'Olive',
'ombre',
'Orange',
'orchid',
'ORGANIC',
'Original Food',
'peanut',
'peru',
'pet fem',
'pH7.0',
'pH7.5',
'Pharrell',
'pig',
'Pink',
'Pique',
'plaid',
'plum',
'pocket',
'poly',
'Polyester',
'potato',
'powder',
'Pretzel',
'pumpkin',
'puppy',
'purple',
'rainbow',
'recipe',
'refill',
'Relief',
'ricecake',
'rose',
'salmon',
'senior',
'SET',
'Sienna',
'SKIN',
'smoochers',
'snack',
'Spring',
'SQUIDO',
'squirrel',
'Summer',
'Taster',
'Tropocal',
'TUNA',
'Turquoise',
'U.K',
'uniform',
'USDA 인증',
'winter',
'Wooof',
'XAMAN',
'Yum Yum Treats',
'yummy',
'가려움',
'가려움완화',
'가려움증',
'가려움증 완화',
'가루',
'가성소다',
'가수분해닭고기',
'가자미',
'가자미베지믹스',
'가자미육포',
'가죽껌',
'각막궤양',
'각막염',
'각종 비타민',
'각질',
'각질제거',
'각질케어',
'간',
'간 기능',
'간담관질환',
'간식',
'간장기능',
'간지러운피부',
'간질환',
'간편',
'갈은 닭의 뼈와 연골',
'갈은 양의 뼈와 연골',
'갈은캥거루뼈',
'갈증',
'감귤',
'감기',
'감기예방',
'감성',
'감자전분',
'감초',
'감초추출물',
'강낭콩',
'강아지 아이스크림',
'강아지 유산균',
'강아지간식',
'강아지껌',
'강아지눈꼽',
'강아지눈물',
'강아지장난감간식',
'강아지티백',
'강정',
'강황',
'강황분말',
'개껌',
'개란빵',
'개별진공포장',
'개별포장',
'개복치',
'거위',
'거위고기',
'건강',
'건강검진',
'건강관리',
'건강사료',
'건강식',
'건강필수템',
'건강한 간식',
'건강한 피부',
'건강한피부',
'건사료',
'건선',
'건성피부',
'건식',
'건식사료',
'건조',
'건조간식',
'건조고구마',
'건조토마토',
'건조한눈',
'건조한피부',
'검은 돔발 상어',
'검은참깨',
'검정',
'검정깨',
'검정콩',
'겉감',
'겨울',
'겨울용',
'겨울철',
'견주',
'결막염',
'결명자',
'계란',
'계란노른자',
'계란분말',
'계란후라이',
'계피',
'고구마',
'고구마 오리말이',
'고구마 트릿',
'고구마가 쏙 한입간식',
'고구마말랭이',
'고구마치즈볼',
'고구마쿠키',
'고급',
'고급간식',
'고기',
'고단백',
'고단백 식품',
'고단백 저지방',
'고단백 저지방 간식',
'고단백식품',
'고단백질',
'고분자 코팅',
'고소',
'고소한',
'고양이간식',
'고온바람',
'고핀란드',
'고혈압',
'곡물',
'곡물스틱',
'곤충',
'골격',
'골다공증',
'골드로니',
'골밀도',
'골분가루',
'곰곰연구소',
'곰팡이균',
'곰팡이성피부염',
'공복토',
'과로',
'과일',
'과일스틱',
'과일청크',
'과일칩믹스',
'과자',
'과채',
'과체중',
'과테말라산',
'관절',
'관절 건강',
'관절 보조제',
'관절 영양',
'관절건강',
'관절보호',
'관절연골',
'관절연골건강',
'관절염',
'관절염디스크',
'관절영양제',
'관절케어',
'관절통증 감소',
'교감',
'교감산책',
'교정',
'구강',
'구강관리',
'구강관리간식',
'구강껌',
'구강질환',
'구강케어',
'구기자',
'구례 산수유',
'구연산',
'구취제거',
'구토',
'국내 제조',
'국내산',
'국내산 재료',
'국내산 친환경',
'국내산고구마',
'국내산돼지귀',
'국내산흙당근',
'국내생산',
'국내제조',
'국물',
'국민간식',
'국산 오리',
'국화',
'굴',
'귀관리',
'귀리',
'귀리가루',
'규조토',
'귤',
'그라비올라잎',
'그랜마루시',
'그랜마루시 싱글즈',
'그레이프',
'그레이프에이드',
'그레이프프룻',
'그리니즈',
'그리니즈 티니',
'그리니즈 펫타이트',
'그린빈',
'근대',
'근력강화',
'근육',
'근육발달',
'근육부족',
'근육증강',
'글로시골드',
'글로시실버',
'글로코겐',
'글루코사민',
'글리세린',
'글씨',
'급속 동결',
'급체방지',
'기관지',
'기관지염',
'기관지협착',
'기관지협착증',
'기념',
'기념일',
'기능성',
'기능성 간식',
'기능성껌',
'기력',
'기력보충',
'기력회복',
'기름',
'기름없이 구운',
'기린',
'기부',
'기분전환',
'기생충',
'기억회로',
'기저귀',
'기침',
'기타',
'기호성',
'기호성 파악',
'김밥',
'깔끔',
'깔때기',
'깨끗',
'껌',
'껌대용',
'껍질',
'껍질콩',
'꼬까',
'꼬꼬 그린빈스틱',
'꼬꼬발',
'꼬꼬삼총사',
'꼬끼오',
'꼬떼아꼬떼',
'꼬뜨',
'꼬뜨밀',
'꼬마유령',
'꼬멜',
'꼬멜 커스텀',
'꼬멜티백',
'꽁치',
'꿀',
'꿀고구마',
'꿀꿀귀',
'꿀벌',
'꿀잠',
'꿀호떡',
'나이아신',
'나일론',
'나일론껌',
'나일론츄',
'나주배',
'나트륨',
'낚시대',
'날개',
'남극크릴',
'남해바다 죽방멸치',
'내구성',
'내복',
'내장육',
'내추럴',
'내추럴 태닝',
'냄새',
'냄새관리',
'냄새제거',
'냉기',
'냉동보관',
'냉매',
'냉장보관',
'냉풍건조기법',
'냠냠',
'너겟',
'너구리',
'넉넉한수납',
'넉넉한핏',
'네오프렌',
'네오플랜',
'네온블루',
'네온핑크',
'노견',
'노견용',
'노랑',
'노령견',
'노른자',
'노인성 치매',
'노주옥탕',
'노즈워크',
'노즈워크용',
'노치드 라펠',
'노폐물 배출',
'노폐물제거',
'노화',
'노화방지',
'노화예방',
'녹내장',
'녹용',
'녹차씨오일',
'녹차추출물',
'농축',
'농축대두단백',
'농피증',
'뇌세포발달',
'뇌신경',
'뇌에너지',
'누에',
'누에고치섬유',
'눈',
'눈 건조개선',
'눈 건조증',
'눈 염증',
'눈 영양',
'눈가청결',
'눈가피부',
'눈건강',
'눈건강 영양제',
'눈곱',
'눈관리',
'눈꼽',
'눈물',
'눈물 착색 예방',
'눈물냄새',
'눈물완화',
'눈물자국',
'눈물케어',
'눈사람',
'눈의피로',
'눈질환',
'눈청소',
'뉴질랜드',
'뉴질랜드산 녹용',
'뉴트로',
'늙은호박',
'능금',
'니아신',
'다르마독카르마캣',
'다시마',
'다시마가루',
'다우니스톤',
'다이어트',
'다이어트간식',
'닥스훈트',
'닥터바이',
'닥터바이아이즈',
'닥터웰릿',
'단모',
'단모용',
'단모종',
'단미사료',
'단백질',
'단백질풍부',
'단일단백질',
'단추',
'단추포인트',
'단호박',
'단호박이 쏙 한입간식',
'달걀',
'달맞이유',
'달콤',
'닭',
'닭가슴살',
'닭가슴살 쌀죽',
'닭가슴살 육포',
'닭가슴살 트릿',
'닭간',
'닭간 트릿',
'닭고기',
'닭근위',
'닭근위칩',
'닭날개',
'닭다리',
'닭똥집',
'닭목뼈',
'닭발',
'닭발편육',
'닭복죽',
'닭안심',
'닭안심살',
'담백',
'담백한 닭가슴살 육포',
'당귀',
'당근',
'당근치즈스틱',
'당기기',
'당뇨병',
'당뇨예방',
'당밀',
'당일배송',
'대구',
'대구 껍질',
'대구간유',
'대구맛',
'대구포',
'대장암',
'대장암예방',
'대체식',
'대추',
'대형',
'대형견',
'더 도그 라운지',
'덕',
'데니필드',
'데니필드 컴피',
'데오드란트',
'데이지',
'데이지꽃',
'데일리비타민',
'데일리케어',
'덱스트린',
'덱스판테놀',
'덴탈 껌',
'덴탈껌',
'덴탈츄',
'덴탈케어',
'덴탈테라피',
'도거스',
'도너츠',
'도토리',
'독소 배출',
'독소배출',
'독일',
'돈모',
'돌고래',
'돔발 상어',
'동결',
'동결건조',
'동결건조 가자미',
'동결건조 닭가슴살',
'동결건조 닭가슴살 트릿',
'동결건조 참치',
'동결건조 플레이크',
'동결건조사료',
'동그랑땡',
'동맥경화',
'동물단백질',
'동물등록',
'동물복지 인증',
'동물의약외품',
'동백꽃 향기',
'동백오일',
'동의보감',
'돼지',
'돼지 불고기',
'돼지간',
'돼지고기 트릿',
'돼지귀',
'돼지귀 껌',
'두께감',
'두뇌',
'두뇌건강',
'두뇌영양',
'두뇌활동',
'두부',
'두부네 소문난 왕만두',
'두부선',
'두부오곡말이',
'두잇',
'뒷다리살',
'뒷좌석',
'드래스',
'드로잉',
'든든',
'들깨',
'들소고기',
'듬뿍',
'등나무',
'등판',
'디저트',
'디저트 모양',
'디포리',
'딥레드',
'딥씨',
'따뜻',
'딱딱',
'딸기',
'딸기맛치약',
'딸기분말',
'딸기우유',
'딸기핑크',
'땅콩',
'땡큐스튜디오',
'또앙',
'똑딱',
'똑딱단추',
'똥츄',
'뜨개',
'뜨개질',
'라라빵빵',
'라면',
'라벤더',
'라벤더워터',
'라벤더향',
'라벨',
'라벨 세트',
'라우릴글루코사이드',
'라이신',
'라이크라',
'라인스터드',
'라인옐로우',
'라일락',
'라임',
'라임몬스터',
'라즈베리',
'라즈베리플레이버오일',
'라탄',
'라텍스',
'라펠',
'락토바실러스 루테리',
'락토프리',
'락토프리우유',
'래글런',
'래더',
'랜덤',
'러스크',
'러시아산',
'럭키 스왈로우',
'런닝',
'런던',
'레게',
'레더',
'레드',
'레드벨벳',
'레드우드',
'레모네이드',
'레몬',
'레몬 에센셜',
'레몬그라스',
'레몬옐로우',
'레몬즙',
'레몬향',
'레스베라트롤',
'레시틴',
'레시피',
'레오파드',
'레이븐',
'레인블로커',
'레인수트',
'레토르트',
'레토르트 멸균',
'레트로',
'레트로밀크',
'레티난',
'레티놀산',
'렌틸',
'렌틸콩',
'로렌츠스틱',
'로렌츠큐브',
'로맨틱',
'로먼카모마일워터',
'로얄블루',
'로얄캐닌',
'로즈',
'로즈골드',
'로즈마리잎추출물',
'로즈메리',
'로즈우드',
'로즈워터',
'로즈향',
'로즈힙',
'로프',
'롤',
'롤리',
'롤리X바잇미',
'롤리팝',
'롤링팡',
'롤업',
'롱',
'롱핏',
'롱헤어',
'루시',
'루즈핏',
'루테인',
'루틴',
'루프',
'리넨',
'리놀렌산',
'리놀산',
'리무버',
'리버',
'리버서블',
'리버시블',
'리버츄',
'리보플라빈',
'리본',
'리본 포인트',
'리본끈',
'리본핀',
'리신',
'리씨열매오일',
'리틀바이트 램',
'리틀바이트 살몬 ',
'리틀바이트 치킨',
'리틀바이트 캥거루',
'리틀제주',
'리필',
'리필봉투',
'리필형',
'린넨',
'린넨트위드',
'린스',
'마',
'마감왁스',
'마그네슘',
'마누카',
'마누카 꿀',
'마누카꿀',
'마늘',
'마늘가루',
'마닐라마',
'마리골드',
'마린',
'마린블루',
'마사지',
'마시멜로',
'마시멜로뿌리',
'마약간식',
'마젠타',
'마조람오일',
'마카',
'마카나',
'마카분말',
'마킹',
'마텔오일',
'만두',
'만들기',
'만성신부전',
'말',
'말갈비뼈',
'말고기',
'말랑',
'말랑말랑',
'말불고기',
'말잘듣는약',
'말티즈',
'맛보기세트',
'맛사지',
'맛있는 육포 수제간식',
'망간',
'망고',
'망고우유껌',
'망고칩',
'망고향',
'망막세포',
'망토',
'매너',
'매너벨트',
'매쉬망',
'매치',
'매칭',
'매트유',
'맥주효모',
'머쉬멜로우',
'머스타드',
'머스터드',
'머즐',
'머핀',
'멀바우',
'멀티 에센셜',
'멀티비타민',
'멈머손',
'메론',
'메리노',
'메모리폼',
'메쉬',
'메쉬천',
'메쉬커버',
'메시지',
'메이창',
'메이플',
'메추리',
'메추리껌',
'메탈블랙무광팬던트',
'메트',
'메틸 설포닐 메탄',
'멜론',
'멜팅브래드',
'멜팅브래드 패치',
'면역',
'면역글로블린',
'면역력',
'면역력 강화',
'면역력 영양',
'면역력 증진',
'면역력강화',
'면역력개선',
'면역력증강',
'면역력증진',
'면역영양',
'면역증강작용',
'멸균',
'멸치',
'멸치파우더',
'명절',
'명찰',
'명태',
'명태육포',
'모기',
'모낭충',
'모던',
'모든피부',
'모발영양',
'모시',
'모이스틴',
'모질',
'모질개선',
'모질건강',
'모질관리',
'모질케어',
'모카라떼',
'몬스터',
'몰티즈',
'몸무게',
'무',
'무게',
'무곡물',
'무글루텐',
'무기력증',
'무기질',
'무농약',
'무농약인증',
'무더위',
'무방부제',
'무뼈닭발',
'무스 타입',
'무염',
'무염다시마',
'무염멸치',
'무염멸치파우더',
'무염분 황태채',
'무염치즈',
'무염황태푸딩',
'무인공첨가물',
'무지개',
'무첨가',
'무첨가물',
'무항생제',
'무항생제 닭가슴살',
'무항생제닭',
'무항생제닭가슴살',
'무향',
'무향미제',
'무호르몬',
'묶음',
'묶음배송',
'문어',
'물고기',
'뮤신',
'미강유',
'미국',
'미국 캘리포니아',
'미국동물보조제협회',
'미국사료관리협회',
'미국산',
'미네랄',
'미니 쿠키',
'미니어처푸들',
'미래형 식사',
'미백',
'미세먼지',
'미셸',
'미키',
'미타민K',
'믹스',
'믹스견',
'믹스매치',
'민감',
'민감성',
'민감성 피부',
'민감성피부',
'민감피부',
'민감한피부',
'민들레',
'민트',
'민트라벤더',
'민트블루',
'밀가루무첨가',
'밀리',
'밀싹',
'밀크',
'밀크블루',
'밀크시슬',
'밀크씨슬',
'밀크핑크',
'밀크향',
'바나나',
'바나나 우유껌',
'바나나우유껌',
'바나나칩',
'바나나향',
'바느질',
'바닐라',
'바닐라향',
'바다식사',
'바닥',
'바닥판',
'바른먹거리',
'바리깡',
'바리캉',
'바베큐',
'바비큐',
'바삭',
'바오밥나무오일',
'바이러스',
'바이봉',
'바이트',
'바잇미 ',
'바캉스',
'바커',
'바타민B2',
'박서',
'반려견',
'반려동물 ph',
'반려동물 소변검사키트',
'반려동물 식기',
'반려묘',
'반려생활',
'반려인',
'반영구',
'반팔',
'반팔T',
'발렌타인',
'발효',
'발효화현욕',
'밤바라니',
'방광결석',
'방광염',
'방목',
'방목소',
'배',
'배드말론',
'배드말론 도빌',
'배드말론 라르비크',
'배드말론 오슈',
'배럴즈',
'배앓이',
'배출',
'배탈',
'백내장',
'백넘버',
'백년초',
'백미',
'백화증',
'백화증예방',
'밴드',
'밴딩',
'밴딩가위',
'밴딩처리',
'밸런스',
'밸런스 쿠키',
'뱀장어',
'뱅어포',
'버그헌터',
'버블',
'버블껌향',
'버켓',
'버킷',
'버팔로',
'벌레',
'벌레물림방지',
'벌레퇴치',
'벌룬핏',
'벌스데이',
'벌집구조',
'벚꽃',
'베드',
'베럴즈',
'베럴즈 도그',
'베럴즈 레인수트',
'베럴즈 망고칩',
'베럴즈 바나나칩',
'베럴즈 사과칩',
'베럴즈간식',
'베레모',
'베르가못향',
'베르티',
'베리',
'베리부스트',
'베스트셀러',
'베스트에버',
'베스트에버하이베어',
'베아또',
'베어',
'베이비 파우더향',
'베이비파우더',
'베이컨 맛',
'베이컨향',
'베이킹소다',
'베지 플리스',
'베지믹스',
'베지터블 소가죽',
'베타글루칸',
'베타시아닌',
'베타카로틴',
'베타카르틴',
'베트남산',
'벨로아',
'벨벳',
'벨크로',
'벨트',
'변비',
'변비/대장암 예방',
'변비예방',
'변비해소',
'별도',
'별매품',
'별사탕',
'병아리콩',
'보냉기능',
'보리',
'보리지 오일',
'보상',
'보상간식',
'보스웰리아',
'보스턴테리어',
'보스톤테리어',
'보습',
'보습공급',
'보습관리',
'보습제',
'보습케어',
'보습효과',
'보약',
'보양',
'보양식',
'보온성',
'보울',
'보자기',
'보조제',
'보조치료제',
'보존재무첨가',
'보호',
'복숭아',
'복숭아향',
'복슬강아지',
'복슬유과',
'복죽',
'복합소화효소',
'볶은홍화씨',
'본체',
'볼',
'볼락',
'볼락 껍질',
'볼륨',
'봄',
'봄/가을',
'봄가을',
'봉쥬르뚜뚜',
'봉투',
'부다페스트',
'부드러운',
'부드러운식감',
'부드러움',
'부시앤버치',
'부시앤버치 로그',
'부종',
'부착',
'북어',
'북어채',
'북어트릿',
'북어파우더',
'분골녹용',
'분리',
'분리불안',
'분사기',
'분산',
'분유',
'분해',
'분홍',
'불고기',
'불독',
'불빛',
'불소',
'불안',
'불안감',
'불안감 완화',
'불안장애',
'불포화지방산',
'붉은기',
'붓기감소',
'붕어',
'붕어빵',
'브라우니',
'브레인츄',
'브로멜라인',
'브로콜리',
'브루클린펫코',
'브릭',
'블랙',
'블랙 단호박',
'블랙마요네즈 ',
'블랙펄',
'블랜딩오일',
'블랭킷',
'블럭',
'블록',
'블루',
'블루바틀',
'블루베리',
'블루베리분말',
'블루스톤',
'블루스프링',
'블루옐로우',
'블루탠저린',
'블루퍼플',
'블링커',
'비건제품',
'비글',
'비뇨기계',
'비닐',
'비닐봉투',
'비듬',
'비로도',
'비로드',
'비만',
'비만예방',
'비버',
'비법 육수',
'비비드',
'비숑',
'비스커서티츄',
'비스켓',
'비스킷',
'비오는날',
'비정제 설탕',
'비코',
'비코 볼',
'비코 볼 온 루프',
'비코 후프 온 루프',
'비코스포크',
'비코펫츠',
'비킷',
'비킷가드 펫',
'비타민',
'비타민A',
'비타민B',
'비타민B1',
'비타민C',
'비타민D',
'비타민D3',
'비타민E',
'비타민E코팅',
'비타민폭탄',
'비타부스트',
'비트',
'비프',
'비프베지믹스',
'비피더스',
'빅독',
'빅바이트 램',
'빅바이트 살몬',
'빅바이트 치킨',
'빅바이트 캥거루',
'빅버드',
'빈혈',
'빈혈예방',
'빌드어퍼피',
'빌베리',
'빠른 효과',
'빠삐용',
'빵',
'빵빵덕',
'뼈',
'뼈 간식',
'뼈간식',
'뼈건강',
'뼈다귀',
'뼈없는 닭발',
'뼈와이빨건강',
'뼈의 대사 유지',
'뽀송',
'뽀송뽀송',
'뽑아쓰는형',
'뾰루지',
'삐에로',
'삑삑',
'사과',
'사과분말',
'사과우유껌',
'사과즙',
'사과칩',
'사과향',
'사냥',
'사딘&앤초비오일',
'사료',
'사료샘플',
'사사미',
'사슴',
'사슴고기',
'사시미',
'사이잘마',
'사이프러스',
'사포닌',
'사해소금',
'산삼',
'산수유',
'산약',
'산양',
'산양분유',
'산양유',
'산양유 젤리솝',
'산책습관',
'산책용',
'살구',
'살구씨',
'살구애프리콧',
'살균',
'살균 소독제',
'살균수',
'살균작용',
'살균효과',
'살몬',
'살비엣떼',
'살아있는 유산균',
'살인진드기',
'살충',
'살코기',
'삼각김밥',
'삼계탕',
'삼계탕전',
'삼베',
'삼색과일치즈',
'상어',
'상어간',
'상어간 오일',
'상어간유',
'상어연골',
'상차림',
'상처',
'상처 회복',
'상처보호',
'상처입은피부',
'상추',
'상쾌함',
'상큼',
'새벽배송',
'새싹땅콩',
'새우튀김',
'새해',
'색동강정',
'색동화과',
'색소빠짐',
'샌달우드',
'샌드위치',
'샐러리',
'샘플',
'샘플간식',
'샘플러',
'생강',
'생기',
'생기부족',
'생분해성',
'생선',
'생선오일',
'생소간',
'생식',
'생일',
'생일파티',
'샤무드',
'샤워',
'서비스',
'석류',
'석류오일',
'선물',
'선물세트',
'설날',
'설날 선물 세트',
'설명서',
'설빔',
'설사',
'설사 완화',
'설사예방',
'설채현',
'설탕',
'섬유',
'섬유소',
'섬유질',
'성견용',
'성난피부',
'성장',
'세균',
'세균성피부',
'세균억제',
'세더우드',
'세라믹',
'세서미 스트리트',
'세일러문',
'세제',
'세탁',
'세탁세제',
'세트',
'세트상품',
'세포의 분화',
'세포재생',
'센서티브',
'센스',
'셀러리',
'셀레늄',
'셀롤로오스',
'소',
'소가죽',
'소간',
'소간 파우더',
'소간가루',
'소간분말',
'소간육포',
'소간쿠키',
'소간파우더',
'소고기',
'소고기야채볼',
'소고기오곡스틱',
'소고기져키',
'소고기큐브',
'소금',
'소독',
'소듐라우릴설포아세테이트',
'소듐코코일애플아미노산',
'소듐클로라이드',
'소떡심',
'소떡심 껌',
'소라',
'소르빈산칼륨',
'소매',
'소매단',
'소변',
'소변검사',
'소변검사 키트',
'소세지',
'소시지',
'소염',
'소와 양의 심장',
'소이빈 오일',
'소파',
'소프',
'소프트',
'소프트사료',
'소프트타입',
'소프트핑크',
'소형',
'소형견',
'소화',
'소화 보조제',
'소화기 문제',
'소화기관',
'소화기능',
'소화기능 촉진',
'소화능력',
'소화율',
'소화율 증가',
'소화작용',
'소화장애',
'소화증진',
'소화효소',
'소화흡수',
'손상된피부',
'솔리드',
'솔트타임',
'솝베리열매추출물',
'송아지 목뼈',
'송아지목뼈',
'송어',
'숏헤어',
'수가공',
'수국',
'수박',
'수분',
'수분 섭취',
'수분공급',
'수분막',
'수분섭취',
'수분지속',
'수분충전',
'수술',
'수술후',
'수용성 단백질',
'수유',
'수의사 추천',
'수의사가 추천하는 사료',
'수입',
'수작업',
'수제',
'수제 비스켓',
'수제 영양식',
'수제 육포',
'수제 치즈',
'수제간식',
'수제사료',
'수축성',
'수컷',
'순록',
'순수 닭고기',
'순수 오리안심',
'숯',
'슈나우저',
'슈트',
'슈퍼곡물',
'슈퍼푸드',
'슈퍼픽션',
'스낵',
'스낵버켓',
'스마일링 트릿',
'스몰',
'스웨덴',
'스위머',
'스위티',
'스윈오렌지오일',
'스윗봉봉',
'스윗아몬드',
'스윗오렌지',
'스카잔',
'스칸디나비아',
'스쿠알렌',
'스쿠터스 부트바',
'스쿠팅',
'스크래쳐',
'스크래쳐 박스',
'스킨',
'스킨&코트',
'스킨케어',
'스킨케어 츄',
'스테고사우르스',
'스테미너',
'스테이크',
'스톤루트',
'스트레스',
'스트레스완화',
'스트레스해소',
'스트로베리',
'스트로베리밀크',
'스트링',
'스틱',
'스틱모양',
'스틱타입',
'스페셜데이',
'스페인',
'스프',
'스프레이',
'스프레이타입',
'스피루리나',
'스피아민트',
'스피츠',
'슬개골',
'슬개골탈구',
'슬개골탈구예방',
'슬개탈구',
'습관',
'습기',
'습식',
'습식사료',
'습열 개선',
'습진',
'시그니처',
'시그니쳐',
'시그니춰',
'시그린',
'시금치',
'시금치고구마큐브',
'시나몬리프',
'시나몬바크',
'시니어',
'시더우드',
'시럽',
'시력',
'시력 보조제',
'시력개선',
'시력건강',
'시력보호',
'시력유지',
'시력향상',
'시리얼',
'시리즈',
'시바',
'시바견',
'시바이누',
'시보리',
'시아노코발라민',
'시야확보',
'시어버터',
'시즌상품',
'시츄',
'시트',
'시트로넬라',
'시폰',
'시폰린넨',
'시폰벨벳',
'식감',
'식단',
'식물성 글리세린',
'식물성글리세린',
'식물성섬유',
'식물성스쿠알란',
'식물성추출물',
'식사',
'식습관',
'식욕',
'식욕부진',
'식욕저하',
'식욕증진',
'식용글리세린',
'식용색소',
'식이관리',
'식이섬유',
'식이알러지',
'식이알레르기',
'식이유황',
'식중독균',
'식탁세트',
'식향',
'신경계',
'신경과민',
'신경활동',
'신부전',
'신생',
'신선',
'신선한 닭고기',
'신선한재료',
'신장',
'신장강화',
'신장결석',
'신장병',
'신장질환',
'신진대사',
'신체 저항력 강화',
'신축성',
'실',
'실내',
'실내생활',
'실내용',
'실루엣',
'실리콘',
'실버',
'실외용',
'실용성',
'실크',
'실크아미노산',
'실키린넨',
'심리 안정',
'심리적 안정',
'심신안정',
'심장',
'심장건강',
'심장병',
'심장병 예방',
'심장사상충',
'심장질환',
'심혈관',
'심혈관 강화',
'심혈관질환',
'싱글소파',
'쌀',
'쌀가루',
'쌀겨',
'쌀죽',
'써모라이트',
'썸머',
'썸머컬렉션',
'쐐기풀',
'쓸개골',
'씨앗',
'씹기 좋은 명태육포',
'씹기놀이',
'씹는재미',
'아가베시럽',
'아가일',
'아니스씨',
'아레사',
'아로니아',
'아로마',
'아로마솔트타임',
'아로마에센셜',
'아로마오일',
'아로마테라피',
'아르간 오일',
'아르간오일',
'아르간트라커넬오일',
'아르헨티나산',
'아마',
'아마씨',
'아마존 카테고리 1위',
'아메노백',
'아몬드 향',
'아미노산',
'아밀로이드',
'아베크',
'아보카도',
'아보카도버진오일',
'아사이베리',
'아삭이당근',
'아세틸콜린',
'아스타잔틴',
'아연',
'아웃도어',
'아유르베다',
'아이스',
'아이스크림',
'아이슬란드',
'아이즈케어 ',
'아이케어',
'아인솝',
'아일렛',
'아카나',
'아쿠아',
'아쿠아마린',
'아크릴',
'아토피',
'아티즌',
'아티즌 닭고기',
'아티즌 돼지고기',
'아파토사우르스',
'안감',
'안개분사',
'안과질환',
'안동 산약',
'안심',
'안심치약',
'안전',
'안전검사',
'안전고리',
'안전끈',
'안전등',
'안전문',
'안전한 성분',
'안전한성분',
'안전함',
'안정',
'안충',
'안토시아닌',
'알긴산',
'알란토인',
'알래스카',
'알래스칸블루',
'알러젠프리 ',
'알러지',
'알러지개선',
'알러지성피부',
'알러지프리',
'알레르기',
'알레스카',
'알레스카 연어',
'알로에베라',
'알록달록',
'알칼로이드',
'알칼리성',
'알콧',
'알파 리포익산',
'암세포',
'암예방',
'암치료',
'암컷',
'압축',
'압축펠트',
'압축포장',
'앙백',
'앙버터',
'앙투맨',
'앞좌석',
'애견 티백',
'애니멀',
'애니멀 프린트',
'애니멀 프린팅',
'애쉬블루',
'애플망고',
'애플민트',
'애플플레이버오일',
'애호박',
'액티브',
'앤블랭크',
'앤블랭크 글로우',
'앤블랭크 블루레이크',
'앤블랭크 해이',
'앤초비',
'앤폴펫츠',
'야간',
'야간보행',
'야광',
'야맹증',
'야미',
'야상',
'야생진드기',
'야생캥거루',
'야외',
'야채',
'야채간식',
'야채범벅',
'야채스틱',
'야채큐브',
'야채크런치',
'야채파우더',
'약',
'약모밀추출물',
'약봉투',
'약알칼리성',
'약재',
'얌얌',
'얌얌트릿',
'얌얌트릿 연어와 당근',
'얌얌트릿 채소와 코코넛',
'양',
'양고기',
'양모',
'양배추',
'양치',
'양치질',
'어깨끈',
'어니스트그레이',
'어니스트밀',
'어덜트',
'어덜트 프랩',
'어드벤처 라이트',
'어드벤쳐',
'어류',
'어린강아지',
'어바웃밀',
'어스배스',
'어썸포썸',
'어유',
'어텀',
'어헤드',
'얼리모닝',
'업그레이드',
'에너지',
'에덴숑',
'에바주니',
'에센셜오일',
'에센스',
'에스텔라',
'에어건조사료',
'에어드라이사료',
'에코서트',
'엔쵸비',
'엔쵸비 오일',
'엔틱골드',
'엘모',
'엠보싱',
'여드름피부',
'여름',
'여름나기',
'여름용',
'연골',
'연골케어',
'연근',
'연근오리칩',
'연근칩',
'연두',
'연보라',
'연블루',
'연어',
'연어 스테이크',
'연어 쌀죽',
'연어맛',
'연어베지믹스',
'연어스틱',
'연어엑기스',
'연어초밥',
'연어치즈볼',
'연어큐브',
'연어파우더',
'연어화과',
'열량',
'열빙어',
'염소',
'염소고기',
'염증',
'염증 감소',
'염증감소',
'염증성 질환',
'염증성피부',
'염증진정',
'염증치료',
'염증케어',
'엽록소',
'엽산',
'엽서',
'영국',
'영양',
'영양 보충',
'영양 특식',
'영양가',
'영양간식',
'영양공급',
'영양만점',
'영양바',
'영양발란스',
'영양밸런스',
'영양보충',
'영양부족',
'영양소',
'영양제',
'영양죽',
'영양특식',
'영양풍부',
'예민',
'예스무스',
'예스아임리얼',
'예약주문',
'옐로우',
'오가닉',
'오곡',
'오곡쿠키',
'오디너리 폼',
'오래 씹을',
'오렌지',
'오롤리데이',
'오리',
'오리 저키',
'오리&고구마 돌돌말이',
'오리&단호박 돌돌말이',
'오리가슴살',
'오리고기',
'오리날개',
'오리말이',
'오리목뼈',
'오리발',
'오리복죽',
'오리사과콕',
'오리안심',
'오리안심살',
'오리안심육포',
'오리안심져키',
'오리야채스팀',
'오리야채찜',
'오리육포',
'오리저키',
'오리지널',
'오리탕',
'오리탕전',
'오메가',
'오메가3',
'오메가6',
'오븐 베이크',
'오스트레일리아',
'오이',
'오징어',
'오키드',
'오키로스틱 ',
'오토캠핑',
'오트',
'오트밀',
'오트밀분말',
'오픈형',
'옥산살',
'옥수수',
'옥수수전분',
'옥스포드',
'올리고당',
'올리브',
'올리브스쿠알렌',
'올리브엑스트라버진오일',
'올리브오일',
'올리브유',
'올박스',
'올박스 부시버거스',
'올박스 캉가뱅거스',
'와인',
'완두콩',
'완전식품',
'외로움',
'외부해충',
'외이염',
'요거트',
'요로감염',
'요로결석',
'요리',
'요붕증',
'용과',
'용안육',
'용혈성빈혈',
'우슬',
'우엉',
'우엉뿌리',
'우엉육전',
'우울',
'우울증',
'우유',
'우유껌',
'우족',
'우주식사',
'우프',
'우프바이배럴즈',
'우프바이베럴즈',
'우피',
'운동부족',
'워터멜론',
'원기회복',
'원물',
'원상회복',
'원재료',
'월계수오일',
'월리',
'웰빙',
'웰시코기',
'위궤양',
'위벽보호',
'위산분비 억제',
'위장건강',
'위장운동 향상',
'위즈덤',
'위치하젤워터',
'윈터 그랜마 베스트',
'유기견',
'유기농',
'유기농 쌀가루',
'유기농쌀',
'유기농원료',
'유기동물보호소',
'유대감',
'유럽펫푸드산업연맹',
'유산균',
'유산균 10종',
'유산균 쿠키',
'유산균츄',
'유산생성균',
'유수분막형성',
'유아용 등급',
'유익균',
'유채씨오일',
'유청단백질',
'유카',
'유칼립투스',
'유칼립투스오일',
'유해균 억제',
'유해성분 무검출',
'유해충',
'유황',
'육류 알러지',
'육수',
'육질',
'육포',
'윤기',
'윤기나는 털',
'율무',
'은행잎',
'음료',
'음수량',
'의약외품',
'의약용 오일',
'이갈이',
'이갈이용껌',
'이나피스퀘어',
'이뇨작용',
'이빨',
'이산화규소',
'이상증상',
'이스라엘사해소금',
'이중모',
'이지독',
'이탈리아',
'이탈리안그레이하운드',
'이태리',
'익스트림',
'인',
'인공색소 무첨가',
'인기',
'인기간식',
'인기상품',
'인기아이템',
'인기제품',
'인도네시아',
'인도산',
'인증시설',
'인지기능',
'인지력',
'인지질',
'일랑일랑',
'일랑일랑오일',
'일일공칠',
'일체형',
'임신',
'임신견',
'입냄새',
'입냄새감소',
'입냄새제거',
'입맛',
'잇몸',
'잇몸 마사지',
'잇몸염증',
'잇몸질환',
'잇츄',
'잇츄그린',
'잇츄브라운',
'잇츄옐로우',
'자견',
'자견용',
'자극완화',
'자몽',
'자몽추출물',
'자색고구마',
'자연간식',
'자연바람',
'자연방목',
'자연산',
'자연산 흰살생선',
'자연식',
'자연식품',
'자연유래 성분',
'자연풍',
'자연향균',
'자운고유',
'자유방목',
'자체제작',
'잔탄검',
'잡아당기기',
'장',
'장 보조제',
'장 운동',
'장 트러블',
'장건강',
'장기능',
'장기능 정상화',
'장내유익균',
'장모',
'장모용',
'장모종',
'장모치와와',
'장미열매',
'장어',
'장운동',
'재생력',
'재활치료',
'잭러셀테리어',
'저 알레르기 단백질',
'저 콜레스테롤',
'저단백',
'저단백질',
'저먼캐모마일워터',
'저알러지',
'저알러지 간식',
'저알러지간식',
'저알레르기',
'저열량',
'저염멸치',
'저온',
'저온건조공법',
'저온바람',
'저자극',
'저지방',
'저지방간식',
'저지방식단',
'저칼로리',
'저키',
'저탄수화물',
'저혈압',
'적배추',
'적색 청정육',
'적양배추',
'적양파',
'적은모량',
'적파프리카',
'전견종',
'전문쉐프',
'전분',
'전연령',
'전연령용',
'전통유과',
'전통음식',
'절뚝거림',
'점액',
'정량급식',
'제로쇼크',
'제아잔틴',
'제주',
'제주 당근',
'제주 청란',
'제주 청록',
'제주도',
'제주말고기',
'제주산 망고',
'제주산 바나나',
'제주산 브로콜리',
'젠틀펍',
'젤라틴',
'젤리곰',
'져키',
'조공',
'조단백질',
'조섬유',
'조앤강',
'조인트',
'조인트케어',
'조절',
'조절벨트',
'조지방',
'졸도',
'종합영양제',
'주니퍼',
'주니퍼베리',
'주니퍼베리오일',
'주름',
'주문제작',
'주스',
'주식',
'죽',
'죽방멸치',
'중대형견',
'중대형견용',
'중성',
'중성지방',
'중성화',
'중풍',
'중형',
'중형견',
'쥬키니',
'증기',
'지루성',
'지루성두피염',
'지방',
'지방분해',
'지방산',
'지성피부',
'지혈',
'직접생산',
'진공 포장',
'진드기',
'진저',
'진저맨',
'진정',
'진정효과',
'진짜 과일이 들어간 우유껌',
'질경이',
'질병예방',
'질환',
'쫄깃',
'쮸르',
'쮸리',
'찜',
'착색예방',
'착한성분',
'참깨',
'참느릅나무',
'참치',
'참치맛',
'참치트릿',
'찹앤찹',
'찹찹트릿',
'창포추출물',
'채소',
'천연 관절 영양제',
'천연 글리세린',
'천연 아로마',
'천연 아로마 블렌딩',
'천연 에센셜 오일',
'천연 원료',
'천연간식',
'천연보조제',
'천연보존제',
'천연비타민E',
'천연성분',
'천연소염제',
'천연오일',
'천연요거트',
'천연원료',
'천연재료',
'천연향',
'철분',
'첨킨부스트',
'청각',
'청경채',
'청계닭',
'청대',
'청대쪽 분말',
'청란',
'청록',
'청양 구기자',
'청어',
'청어맛',
'청정육',
'청정지역',
'청정편백수',
'청크',
'체내독성제거',
'체력',
'체력회복',
'체리',
'체스트넛',
'체온유지',
'체중관리',
'체중관리용',
'체중조절',
'체지방',
'체지방감소',
'체지방분해',
'체험팩',
'초록',
'초록잎홍합',
'초유',
'촉촉',
'촉촉한',
'촉촉한 간식',
'최상급',
'최상위등급',
'추위',
'출산',
'충격완화',
'충치',
'충치균',
'츄',
'츄르',
'츄어블',
'츄잉',
'치료식',
'치마',
'치매',
'치매 예방',
'치매예방',
'치석',
'치석껌',
'치석제거',
'치석제거껌',
'치아',
'치아 건강',
'치아관리',
'치아씨드',
'치와와',
'치유력',
'치은염',
'치주염',
'치주질환',
'치즈',
'치즈 쿠키',
'치즈딸기블루',
'치즈류',
'치즈무지개떡',
'치즈캔디',
'치카껌',
'치커리뿌리',
'치킨',
'치킨 베지믹스',
'치킨&고구마 돌돌말이',
'치킨&단호박 돌돌말이',
'치킨야채스팀',
'치킨야채푸딩',
'치킨팝',
'친환경',
'친환경 무농약',
'친환경대나무',
'칠레산',
'칠면조',
'칠면조 가슴살',
'칠면조 고기',
'칠면조고기',
'침',
'칩스',
'칫솔껌',
'칫솔모양',
'칭찬간식',
'칭찬용',
'칭찬용간식',
'카렌듈라',
'카로틴',
'카르기난',
'카멜',
'카모마일꽃오일',
'카모마일추출물',
'카민',
'카민프로젝트',
'카밍릴리프',
'칼로리',
'칼륨',
'칼슘',
'칼슘보충',
'캐나다',
'캐니오틱',
'캐롭',
'캐롭코코넛큐브',
'캐모마일',
'캐모마일꽃오일',
'캐모마일로먼',
'캐모마일워터',
'캔',
'캔디',
'캠핑',
'캡슐',
'캡틴폭스',
'캣닢',
'캣닢가루',
'캣닢오리저키',
'캣모나이트',
'캣츠모리',
'캥거루',
'캥거루고기',
'캥거루꼬리뼈',
'캥거루불고기',
'캥거루의 심장',
'캥거루장기',
'커스텀',
'커큐민',
'컨디션',
'컵',
'컵케이크',
'컵케익',
'컵케잌',
'컷아웃',
'케라틴아미노산',
'케롭',
'케이크',
'케일',
'케톤산증',
'켈틱',
'켈틱 커넥션',
'켈프파우더',
'코끼리',
'코로나',
'코사펫',
'코엔자임',
'코카스파니엘',
'코케',
'코코',
'코코넛',
'코코넛 비스켓',
'코코넛 솔솔 하루하나 스틱',
'코코넛 트릿',
'코코넛분말',
'코코넛슈가',
'코코넛슬라이스',
'코코넛오일',
'코코아밀크',
'코티지 무염치즈',
'코티지 치즈',
'콘드로이친',
'콘드로이틴',
'콜라겐',
'콜라겐 육수',
'콜라보',
'콜레스테롤',
'콜레스테롤 감소',
'콜레스테롤 억제',
'콜로이드 오트밀',
'콜리플라워',
'콜린',
'콤브',
'콤비네이션',
'콧물',
'콩',
'콩팥',
'쿠키',
'쿠키몬스터',
'쿨링',
'쿨민트',
'퀴노아',
'퀼팅',
'퀼팅 ',
'큐브',
'큐브간식',
'크랜베리',
'크롭',
'크리미 스튜디오',
'크리스마스',
'크릴',
'크릴새우',
'크릴새우 오일',
'크릴오일',
'크림',
'크링클',
'크산토필',
'클로렐라',
'클로렐라분말',
'클로로필',
'클로르 헥시딘',
'키링',
'키블',
'키블사료',
'킵히트',
'타닌',
'타마누오일',
'타우린',
'타조',
'타조불고기',
'타피오카',
'타피오카 전분',
'탄닌 성분',
'탄력',
'탄력부족',
'탈구예방',
'탈지분유',
'터메릭',
'턱 근육',
'털 빠짐',
'털개선',
'털빠짐',
'테디베어',
'테리어',
'테리토리',
'테스터',
'테스터 팩',
'텐셀',
'텐트',
'토글',
'토글 베스트',
'토끼',
'토끼고기',
'토마토',
'토마토개찹',
'토비',
'토일론',
'토코페롤',
'토핑',
'통밀',
'통연어와 정어리',
'통조림',
'투습성',
'트러블',
'트러블완화',
'트레오닌',
'트레이닝',
'트레할로스',
'트렌치',
'트로피칼',
'트로피컬',
'트립시',
'트릿',
'특별식',
'특별한 선물',
'특별한간식',
'특식',
'튼튼',
'티라노사우르스',
'티백',
'티아민',
'티트리',
'티트리오일',
'팅클프리',
'파라벤 프리',
'파슬리',
'파슬리 솔솔 하루하나 스틱',
'파슬리 피에르트',
'파우더',
'파우더 타입',
'파우더향',
'파우치',
'파워붐붐',
'파인애플',
'파티믹스',
'파파야',
'파프리카',
'파프리카분말',
'파프리카치즈큐브',
'파피용',
'판테놀',
'팜오일',
'팜컴퍼니',
'팜트리',
'패밀리랩',
'패츌리',
'패키지',
'퍼그',
'퍼시터',
'퍼피',
'퍼피 프랩',
'페뇨아',
'페일민트',
'페키니즈',
'페퍼민트',
'페퍼민트오일',
'페퍼민트향',
'펙틴',
'펫음료',
'펫푸드',
'편백수',
'편식',
'편식하는 아이',
'편안',
'편안함',
'포도씨',
'포르투갈',
'포르피린',
'포메라니안',
'포상용',
'포에브리바리',
'폭신',
'폭신폭신',
'폴라텍',
'폴란드산',
'폴로',
'폴리페놀',
'폼피츠',
'표고버섯',
'푸들',
'푸디웜',
'푸딩',
'푸미',
'푸석',
'푸실리',
'품질인증',
'풍선껌향',
'풍치',
'퓨어린넨',
'퓨어퍼먼스',
'퓨어퍼먼스 토끼',
'퓨어퍼먼스 프리믹스',
'퓨어퍼먼스 흰살생선',
'프라그제거',
'프락토올리고당',
'프랑킨센스',
'프레그런스 ',
'프레디',
'프레첼',
'프렌치불독',
'프로메나드',
'프로바이오틱스',
'프로폴리스',
'프룻칩',
'프리런',
'프리미엄',
'프리미엄 간식',
'프리믹스',
'프리바이오틱스',
'플라그',
'플라스틱',
'플라잉덕',
'플래드',
'플랫',
'플레이버오일',
'플레이크',
'플레인',
'플레인 베지믹스',
'플레인 우유껌',
'플로럴워터',
'피로방지',
'피로해소',
'피로회복',
'피리',
'피리독신',
'피마자오일',
'피마자유',
'피모',
'피모 개선',
'피모 영양',
'피모개선',
'피모건강',
'피모관리',
'피모보조제',
'피모윤기',
'피부',
'피부 보습',
'피부 트러블',
'피부/모질',
'피부건강',
'피부균형',
'피부노화',
'피부면역력',
'피부밸런싱',
'피부병',
'피부보호',
'피부보호막',
'피부불균형',
'피부소염',
'피부손상',
'피부염',
'피부염증',
'피부영양공급',
'피부와코트',
'피부자극',
'피부장벽강화',
'피부재생',
'피부진정',
'피부질환',
'피부촉촉',
'피부탄력',
'피부트러블',
'피부활력',
'피부회복',
'피쉬 스낵',
'피쉬오일',
'피자',
'피치',
'피치퍼펙트',
'피케',
'피코시아닌 카로테노이드',
'피콕',
'피톤치드',
'피톤치드오일',
'피톤치드워터',
'피톤치트향',
'핀란드',
'필라 플리스',
'필로라이크',
'필리핀산',
'필수 아미노산',
'필수아이템',
'필수지방산',
'필수품',
'필예트',
'핏펫',
'하드타입',
'하루하나',
'하루한번',
'하리보',
'하비앤레보',
'하와이안',
'하운드투스',
'하울고',
'하울리',
'하울팟',
'하이드로졸',
'하이포알러제닉',
'하트케어',
'하티하트',
'한 입',
'한끼',
'한방',
'한방 간식',
'한방 성분',
'한방재료',
'한식',
'한약',
'한약파우치',
'한우',
'한우간',
'한입',
'한입간식',
'한입사이즈',
'한입에 쏙 얌얌트릿',
'한입크기',
'한천',
'할로윈',
'할로윈 펌킨',
'할로윈데이',
'합성섬유',
'합성피혁',
'핫도그',
'항균',
'항당뇨',
'항문샘',
'항비만',
'항빈혈',
'항산화',
'항산화 성분',
'항산화 식품',
'항산화작용',
'항산화제',
'항산화효과',
'항생제 처치',
'항아리핏',
'항암',
'항암작용',
'항암효과',
'항염증',
'항염효과',
'항우울',
'항자극물질',
'항종양',
'항진균',
'항진균효능',
'해독',
'해독작용',
'해바라기씨오일',
'해바라기유',
'해외배송',
'해조류',
'해조추출물',
'해초',
'해초추출물',
'해충방지',
'해충예방',
'해충테스트',
'핸드메이드',
'햄버거',
'햄북어',
'햄프씨드',
'행거',
'향균',
'향균성',
'향균시스템',
'향기',
'향등골나물',
'허리밴드',
'허브',
'허브성분',
'허브스미스',
'허약',
'허약체질',
'허츠앤베이',
'헙스',
'헤이제리',
'헤이즐넛',
'헤잇미',
'헥산디올',
'헬러윈',
'헬시츄',
'현미',
'혈관',
'혈관건강',
'혈관질환',
'혈당지수',
'혈소판감소',
'혈압',
'혈액',
'혈액관리',
'혈액순환',
'혈전예방',
'호두',
'호두과자',
'호로파',
'호박',
'호박고구마',
'호박씨',
'호주간식',
'호주산',
'호흡곤란',
'호흡기',
'홈케어',
'홍두깨살',
'홍삼',
'홍연어',
'화식',
'화이트 머스크향',
'화이트테리어',
'활동성',
'활력',
'활성 이스트',
'활성산소제거',
'황금단호박',
'황마',
'황반병성',
'황태',
'황태 파우더',
'황태까스',
'황태러스크',
'황태복죽',
'황태스틱',
'황태영양바',
'황태오리말이',
'황태채',
'황태푸딩',
'회복',
'회복기',
'회복식',
'후각',
'후로킹',
'후르타',
'후원',
'훈련간식',
'훈련용',
'훈련용간식',
'휘핑크림',
'휴고앤셀린',
'휴대',
'휴대용',
'휴먼 그레이드',
'휴먼그레이드',
'흑당근',
'흑미',
'흡수',
'흡수력',
'흡수성',
'흰살생선',
'흰살생선 트릿',
'히라키',
'히비스커스꽃추출물',
'히아루론산',
'히아신스',
'히포',
'힙앤조인트',

                            );

    protected $brand_word = array('쿠로모찌' => 
                                array('쿠로모찌','KUROMOCHI'),
                            );

    protected $category_word = array(
                                '패션'=> array(
                                        '탑',
                                        '아우터'=> array('니트/스웨터/가디건','패딩'),
                                        '티셔츠/블라우스/후드'=> array('티셔츠','민소매 티셔츠','셔츠/블라우스','맨투맨/스웨트셔츠','후드'),
                                        '드레스/스커트',
                                        '올인원/팬츠',
                                        '케이프/스카프/머플러',
                                        '모자/가방',
                                        '악세서리' => array('신발/양말','안경/선글라스','헤어핀/주얼리'),
                                        '시즌상품/코스튬'=> array('수영복/구명조끼','한복','할로윈','생일파티','레인코트'),
                                        '펫펨족(커플룩)',
                                        ),
                                '푸드'=> array(
                                        '주식' => array('습식사료','자연식','건식사료','에어/동결건조 사료','소프트사료'),
                                        '간식'=> array('수제간식','동결/건조간식','치석제거껌','뼈간식','사사미/육포','저키/스틱/트릿','캔/파우치','분유/우유/음료','빵/케이크/쿠키','소시지/파우더'),
                                        '영양제'=> array('유산균','종합영양제','오메가3','관절/칼슘','면역력','눈건강','피부/모질','덴탈케어','불안/스트레스','심장/심혈관'),
                                        ),

                                '산책·외출'=> array(
                                        '하네스/가슴줄/목줄/리드줄' => array('하네스/가슴줄','목줄','리드줄'),
                                        '인식표/목걸이',
                                        '산책용품'=> array('산책가방','배변봉투','물통','기타'),
                                        ),
                                '이동' => array(
                                        '이동가방/슬링백' => array('이동가방','슬링백','백팩'),
                                        '유모차/캐리어' => array('유모차/웨건','캐리어/이동장'),
                                        '카시트/차량용품'=> array('카시트','차량용품'),
                                        ),
                                '홈·리빙(펫테리어)' => array(
                                        '하우스' => array('하우스','켄넬','안전문/펜스','펫도어'),
                                        '쿠션/방석/침대',
                                        '식기'=> array('식탁세트','세라믹','스텐','유리','자동급식기','기타'),
                                        '계단/스텝',
                                        '미끄럼방지 매트',
                                        '스페셜데이'=> array('파티용품','생일상','포토존','명절'),
                                        ),
                                '놀이·장난감'=> array(
                                        '노즈워크',
                                        '장난감/인형',
                                        '공/원반',
                                        '훈련용품',
                                        ),
                                '미용·목욕·위생·배변'=> array(
                                        '배변패드/배변판/기저귀'=> array('배변패드/배변판','기저귀'),
                                        '목욕용품'=> array('샴푸/컨디셔너/비누','스파/입욕제','욕조','타올/드라이가운','드라이룸'),
                                        '브러쉬/미용관리'=> array('브러쉬','보습제','미스트','발톱깎이','미용가위/클리퍼'),
                                        '구강관리' => array('치약/칫솔','구강티슈'),
                                        '눈/귀 관리' => array('눈세정제','귀세정제'),
                                        '넥카라',
                                        '탈취/소독/위생용품',
                                        ),
                                '기타',
                                );

    /**
     * 헬퍼를 로딩합니다
     */
    protected $helpers = array('form', 'array');

    function __construct()
    {
        parent::__construct();

        /**
         * 라이브러리를 로딩합니다
         */
        $this->load->library(array('querystring','aws_s3','form_validation'));

        $this->imageAnnotator = new ImageAnnotatorClient([
            'credentials' => './denguru2-51a54-34c83efd96e6.json'
        ]);


        # Instantiates a client
        $this->translate = new TranslateClient([
            'key' => config_item('translate_key')
        ]);

        $projectId = 'denguru2-51a54';
        
        $this->naturallanguage = new LanguageClient([
            'projectId' => $projectId,
            'keyFilePath' => 'denguru2-51a54-34c83efd96e6.json'
        ]);
    }


    /**
     * 전체 메인 페이지입니다
     */
    
   
    public function crawling_update($post_id = 0)
    {   
        
        // 이벤트 라이브러리를 로딩합니다
        $eventname = 'event_crawl_index';
        $this->load->event($eventname);

        $post_id = (int) $post_id;
        if (empty($post_id) OR $post_id < 1) {
            show_404();
        }

        $post = $this->Post_model->get_one($post_id);
        if ( ! element('post_id', $post)) {
            show_404();
        }
        
        
        $post['extravars'] = $this->Post_extra_vars_model->get_all_meta($post_id);
        $post['meta'] = $this->Post_meta_model->get_all_meta($post_id);
       

        $crawlwhere = array(
            'brd_id' => element('brd_id', $post),
        );

        $board_crawl = $this->Board_crawl_model->get_one('','',$crawlwhere);
        if ( ! element('brd_id', $board_crawl)) {
            show_404();
        }

        $postwhere = array(
            'post_id' => $post_id,
        );
        $link = $this->Post_link_model
            ->get('', '', $postwhere, '', '', 'pln_id', 'ASC');


        

        require_once FCPATH . 'plugin/simplehtmldom/simple_html_dom.php';


        
        foreach ($link as $key => $value) {
            
            
        
            $proxy_userpwd = 'username:password';
            $proxy_userpwd = '';
            $proxies[] = '10.0.0.1:80';
            $proxies[] = '10.0.0.2:8080'; 
            $proxies[] = '10.0.0.3:80'; 
            $proxies[] = '10.0.0.4:8080'; 
            $proxies[] = '10.0.0.5:80'; 
             
            $proxy_count = count($proxies) - 1;
             
            $proxy = $proxies[rand(0,$proxy_count)];
            $proxy = 0;
             
            $cmallwhere = array(
                'pln_id' => element('pln_id',$value),
            );
            $cmall = $cmall_out = $this->Cmall_item_model
                ->get('', '', $cmallwhere, '', '', 'pln_id', 'ASC');
            
            $linkupdate = array(
                'pln_error' => 1,
            );

            $this->Post_link_model->update(element('pln_id',$value),$linkupdate);


            if(element('pln_page', $value)){
                $param =& $this->querystring;

                $pln_url = parse_url(element('pln_url', $value));

                parse_str($pln_url['query'] ,$query_);
                
                
                


                for($page=$query_['page'];element('pln_page', $value) >= $page;$page++){
                    echo $pln_url['scheme']."://".$pln_url['host'].$pln_url['path'].'?'.$param->replace('page',$page,$pln_url['query'])."<br>";
                    
                    $result = $this->extract_html($pln_url['scheme']."://".$pln_url['host'].$pln_url['path'].'?'.$param->replace('page',$page,$pln_url['query']), $proxy, $proxy_userpwd);

                    if($result['code']===200){

                        // 기존 항목을 모두 지운다.
                        
                        

                        

                        $html = new simple_html_dom();
                        $html->load($result['content']);

                        $crawl_info=array();
                        $crawl_img=array();
                        $is_pln_error=false;
                        

                        if(element('post_content', $post))
                            eval(element('post_content', $post));
                        elseif(element('brd_content', $board_crawl))
                            eval(element('brd_content', $board_crawl));
                        
             
                        if(count($crawl_info) && count($crawl_img)){

                            foreach($crawl_info as $ikey => $ivalue){

                                $flag=false;
                                foreach ($cmall as $c_key => $c_value) {
                                    if(element('crawl_goods_code',$ivalue) === element('cit_goods_code',$c_value)){
                                        unset($cmall_out[$c_key]);
                                        $flag=true;

                                        $updatedata = array(                                        
                                            'post_id' => $post_id,
                                            'cit_name' => element('crawl_title',$ivalue) ? element('crawl_title',$ivalue) : element('cit_name',$c_value) ,
                                            'cit_summary' => element('crawl_sub_title',$ivalue) ? element('crawl_sub_title',$ivalue) : element('cit_summary',$c_value) ,
                                            'cit_price' => preg_replace("/[^0-9]*/s", "", element('crawl_price',$ivalue)) ? preg_replace("/[^0-9]*/s", "", element('crawl_price',$ivalue)) : element('cit_price',$c_value) ,
                                            'cit_updated_datetime' => cdate('Y-m-d H:i:s'),
                                            'cit_post_url' => $this->valid_url($board_crawl,$this->http_path_to_url(element('crawl_post_url',$ivalue),element('pln_url', $value))) ? $this->valid_url($board_crawl,$this->http_path_to_url(element('crawl_post_url',$ivalue),element('pln_url', $value))) : element('cit_post_url', $c_value),
                                            'brd_id' => element('brd_id', $board_crawl),
                                            'pln_id' => element('pln_id', $value),
                                            'cit_goods_code' => element('crawl_goods_code', $ivalue) ? element('crawl_goods_code', $ivalue) : element('cit_goods_code', $c_value),                        
                                            'cit_is_soldout' => element('crawl_is_soldout', $ivalue) ? element('crawl_is_soldout', $ivalue) : element('cit_is_soldout', $c_value),
                                            
                                        );

                                        // if((element('crawl_title',$ivalue) || element('cit_name',$c_value)) && (preg_replace("/[^0-9]*/s", "", element('crawl_price',$ivalue)) || element('cit_price',$c_value)) && ($this->valid_url($board_crawl,$this->http_path_to_url(element('crawl_post_url',$ivalue),element('pln_url', $value))) || element('cit_post_url',$c_value)) && (element('crawl_goods_code',$ivalue) || element('cit_goods_code',$c_value)))
                                        //     $updatedata['cit_val1'] = 0;
                                        // else 
                                        //     $updatedata['cit_val1'] = 1;
                                        $this->Cmall_item_model->update(element('cit_id',$c_value),$updatedata);

                                        break;
                                    }
                                }

                                if($flag){
                                    

                                    
                                     
                                } else {

                                    // $this->board->delete_cmall(element('cit_id',$o_value));

                                     $updatedata = array(
                                
                                        'post_id' => $post_id,
                                        'cit_name' => element('crawl_title',$ivalue) ,
                                        'cit_summary' => element('crawl_sub_title',$ivalue) ,
                                        'cit_price' => preg_replace("/[^0-9]*/s", "", element('crawl_price',$ivalue)) ,
                                        'cit_datetime' => cdate('Y-m-d H:i:s'),
                                        'cit_updated_datetime' => cdate('Y-m-d H:i:s'),
                                        'cit_post_url' => $this->valid_url($board_crawl,$this->http_path_to_url(element('crawl_post_url',$ivalue),element('pln_url', $value))),
                                        'brd_id' => element('brd_id', $board_crawl),
                                        'pln_id' => element('pln_id', $value),
                                        'cit_goods_code' => element('crawl_goods_code', $ivalue),                        
                                        'cit_is_soldout' => element('crawl_is_soldout', $ivalue),
                                        'cit_status' => 1,
                                        
                                        
                                    );

                                    $cit_id = $this->Cmall_item_model->insert($updatedata);

                                    $updatedata = array();
                                    $updatedata['cit_key'] = 'c_'.$cit_id;
                                            
                                    $this->Cmall_item_model->update($cit_id, $updatedata);

                                    # 이미지 URL 추출
                                    // $imageUrl = $this->valid_url($board_crawl,$crawl_img[$ikey]['img_src']);
                                    $imageUrl = $this->valid_url($board_crawl,$this->http_path_to_url($crawl_img[$ikey]['img_src'],element('pln_url', $value)));
                                    
                                    # 이미지 파일명 추출
                                    
                                    $img_src_array= explode('/', $imageUrl);
                                    $imageName = end($img_src_array);
                                    
                                    

                                    # 이미지 파일이 맞는 경우
                                    if ($fileinfo = getimagesize($imageUrl)) {


                                        # 이미지 다운로드
                                        $imageFile = $this->extract_html($imageUrl);

                                        # 파일 생성 후 저장
                                        $filetemp = fopen($imageName, 'w');
                                        fwrite($filetemp, $imageFile['content']);
                                        fclose($filetemp); // Closing file handle

                                        $file_error = '';
                                        $uploadfiledata = array();
                                        $uploadfiledata2 = array();

                                        $this->load->library('upload');
                                        
                                        $upload_path = config_item('uploads_dir') . '/cmallitem/';
                                        if (is_dir($upload_path) === false) {
                                            mkdir($upload_path, 0707);
                                            $file = $upload_path . 'index.php';
                                            $f = @fopen($file, 'w');
                                            @fwrite($f, '');
                                            @fclose($f);
                                            @chmod($file, 0644);
                                        }
                                        $upload_path .= cdate('Y') . '/';
                                        if (is_dir($upload_path) === false) {
                                            mkdir($upload_path, 0707);
                                            $file = $upload_path . 'index.php';
                                            $f = @fopen($file, 'w');
                                            @fwrite($f, '');
                                            @fclose($f);
                                            @chmod($file, 0644);
                                        }
                                        $upload_path .= cdate('m') . '/';
                                        if (is_dir($upload_path) === false) {
                                            mkdir($upload_path, 0707);
                                            $file = $upload_path . 'index.php';
                                            $f = @fopen($file, 'w');
                                            @fwrite($f, '');
                                            @fclose($f);
                                            @chmod($file, 0644);
                                        }

                                        $uploadconfig = array();
                                        $uploadconfig['upload_path'] = $upload_path;
                                        $uploadconfig['allowed_types'] = '*';
                                        $uploadconfig['max_size'] = 2 * 1024;
                                        $uploadconfig['encrypt_name'] = true;

                                        $this->upload->initialize($uploadconfig);
                                        $_FILES['userfile']['name'] = $imageName;
                                        $_FILES['userfile']['type'] = $fileinfo['2'];
                                        $_FILES['userfile']['tmp_name'] = $imageName;
                                        $_FILES['userfile']['error'] = 0;
                                        $_FILES['userfile']['size'] = $fileinfo['bits'];

                                        if ($this->upload->do_upload('userfile','crawl')) {
                                            $filedata = $this->upload->data();


                                            @unlink($imageName);

                                            $i=1;
                                            $uploadfiledata[$i] = array();
                                            $uploadfiledata[$i]['cfi_filename'] = cdate('Y') . '/' . cdate('m') . '/' . element('file_name', $filedata);
                                            $uploadfiledata[$i]['cfi_originname'] = element('orig_name', $filedata);
                                            $uploadfiledata[$i]['cfi_filesize'] = intval(element('file_size', $filedata) * 1024);
                                            $uploadfiledata[$i]['cfi_width'] = element('image_width', $filedata) ? element('image_width', $filedata) : 0;
                                            $uploadfiledata[$i]['cfi_height'] = element('image_height', $filedata) ? element('image_height', $filedata) : 0;
                                            $uploadfiledata[$i]['cfi_type'] = element('file_type', $filedata);
                                            $uploadfiledata[$i]['is_image'] = element('is_image', $filedata) ? element('is_image', $filedata) : 0;

                                            $upload = $this->aws_s3->upload_file($this->upload->upload_path,$this->upload->file_name,$upload_path,element('file_type', $filedata));       
                                        } else {
                                            $file_error = $this->upload->display_errors();
                                            break;
                                        }


                                        $file_updated = false;
                                        $file_changed = false;
                                        $updatedata = array();
                                        if ($uploadfiledata
                                            && is_array($uploadfiledata)
                                            && count($uploadfiledata) > 0) {
                                            foreach ($uploadfiledata as $pkey => $pval) {
                                               if ($pval) {
                                                   $updatedata['cit_file_' . $pkey] = element('cfi_filename', $pval);
                                                   $this->detect_label($cit_id,config_item('uploads_dir') . '/cmallitem/' . element('cfi_filename', $pval),$ivalue['crawl_title']);
                                                   
                                                   // if(element('crawl_title',$ivalue) && preg_replace("/[^0-9]*/s", "", element('crawl_price',$ivalue)) && $this->valid_url($board_crawl,$this->http_path_to_url(element('crawl_post_url',$ivalue),element('pln_url', $value))) && element('crawl_goods_code', $ivalue))
                                                   //     $updatedata['cit_val1'] = 0 ;
                                                   //  else $updatedata['cit_val1'] = 1 ;
                                               }
                                           }

                                           

                                           $this->Cmall_item_model->update($cit_id, $updatedata);
                                            $file_changed = true;
                                        }
                                        
                                    }
                                    //     && preg_replace("/[^0-9]*/s", "", element('crawl_price',$ivalue)) === element('crawl_price',$c_value)) {
                                    //     unset($crawl_out[$c_key]);
                                    //     $flag=true;
                                    //     break;
                                        

                                    // }
                                        
                                   
                                    
                                }
                            }

                            
                        } else {
                            continue;    
                        }
                    } else {
                        continue;
                    }
                }
                // print_r($crawl_out);
                if($cmall_out){
                    foreach ($cmall_out as $o_key => $o_value) {

                        $crawlfilewhere = array(
                            'cit_id' => element('cit_id', $o_value),
                        );
                        $this->board->delete_cmall(element('cit_id',$o_value));
                    }
                }
                $linkupdate = array(
                    'pln_error' => 0,
                );
                if(!$is_pln_error)
                    $this->Post_link_model->update(element('pln_id',$value),$linkupdate);
            } else {
                echo element('pln_url', $value)."<br>";
                $result = $this->extract_html(element('pln_url', $value), $proxy, $proxy_userpwd);

                if($result['code']===200){
                    // 기존 항목을 모두 지운다.
                    
                    

                    

                    $html = new simple_html_dom();
                    $html->load($result['content']);

                    $crawl_info=array();
                    $crawl_img=array();
                    $is_pln_error=false;
                    

                    if(element('post_content', $post))
                        eval(element('post_content', $post));
                    elseif(element('brd_content', $board_crawl))
                        eval(element('brd_content', $board_crawl));
                    
                    
                    if(count($crawl_info) && count($crawl_img)){

                        foreach($crawl_info as $ikey => $ivalue){

                            $flag=false;
                            foreach ($cmall as $c_key => $c_value) {
                                if(element('crawl_goods_code',$ivalue) === element('cit_goods_code',$c_value)){
                                    unset($cmall_out[$c_key]);
                                    $flag=true;

                                    $updatedata = array(                                        
                                        'post_id' => $post_id,
                                        'cit_name' => element('crawl_title',$ivalue) ? element('crawl_title',$ivalue) : element('cit_name',$c_value) ,
                                        'cit_summary' => element('crawl_sub_title',$ivalue) ? element('crawl_sub_title',$ivalue) : element('cit_summary',$c_value) ,
                                        'cit_price' => preg_replace("/[^0-9]*/s", "", element('crawl_price',$ivalue)) ? preg_replace("/[^0-9]*/s", "", element('crawl_price',$ivalue)) : element('cit_price',$c_value) ,
                                        'cit_updated_datetime' => cdate('Y-m-d H:i:s'),
                                        'cit_post_url' => $this->valid_url($board_crawl,$this->http_path_to_url(element('crawl_post_url',$ivalue),element('pln_url', $value))) ? $this->valid_url($board_crawl,$this->http_path_to_url(element('crawl_post_url',$ivalue),element('pln_url', $value))) : element('cit_post_url', $c_value),
                                        'brd_id' => element('brd_id', $board_crawl),
                                        'pln_id' => element('pln_id', $value),
                                        'cit_goods_code' => element('crawl_goods_code', $ivalue) ? element('crawl_goods_code', $ivalue) : element('cit_goods_code', $c_value),                        
                                        'cit_is_soldout' => element('crawl_is_soldout', $ivalue) ? element('crawl_is_soldout', $ivalue) : element('cit_is_soldout', $c_value),
                                        
                                    );
                                    // if((element('crawl_title',$ivalue) || element('cit_name',$c_value)) && (preg_replace("/[^0-9]*/s", "", element('crawl_price',$ivalue)) || element('cit_price',$c_value)) && ($this->valid_url($board_crawl,$this->http_path_to_url(element('crawl_post_url',$ivalue),element('pln_url', $value))) || element('cit_post_url',$c_value)) && (element('crawl_goods_code',$ivalue) || element('cit_goods_code',$c_value)))
                                    //         $updatedata['cit_val1'] = 0;
                                    //     else 
                                    //         $updatedata['cit_val1'] = 1;
                                    $this->Cmall_item_model->update(element('cit_id',$c_value),$updatedata);
                                    break;
                                }
                            }

                            if($flag){
                                

                                
                                 
                            } else {

                                // $this->board->delete_cmall(element('cit_id',$o_value));

                                 $updatedata = array(
                            
                                    'post_id' => $post_id,
                                    'cit_name' => element('crawl_title',$ivalue) ,
                                    'cit_summary' => element('crawl_sub_title',$ivalue) ,
                                    'cit_price' => preg_replace("/[^0-9]*/s", "", element('crawl_price',$ivalue)) ,
                                    'cit_datetime' => cdate('Y-m-d H:i:s'),
                                    'cit_updated_datetime' => cdate('Y-m-d H:i:s'),
                                    'cit_post_url' => $this->valid_url($board_crawl,$this->http_path_to_url(element('crawl_post_url',$ivalue),element('pln_url', $value))),
                                    'brd_id' => element('brd_id', $board_crawl),
                                    'pln_id' => element('pln_id', $value),
                                    'cit_goods_code' => element('crawl_goods_code', $ivalue),                        
                                    'cit_is_soldout' => element('crawl_is_soldout', $ivalue),
                                    'cit_status' => 1,
                                    
                                    
                                );

                                $cit_id = $this->Cmall_item_model->insert($updatedata);

                                $updatedata = array();
                                $updatedata['cit_key'] = 'c_'.$cit_id;
                                        
                                $this->Cmall_item_model->update($cit_id, $updatedata);

                                # 이미지 URL 추출
                                // $imageUrl = $this->valid_url($board_crawl,$crawl_img[$ikey]['img_src']);
                                $imageUrl = $this->valid_url($board_crawl,$this->http_path_to_url($crawl_img[$ikey]['img_src'],element('pln_url', $value)));
                                
                                # 이미지 파일명 추출
                                
                                $img_src_array= explode('/', $imageUrl);
                                $imageName = end($img_src_array);
                                
                                

                                # 이미지 파일이 맞는 경우
                                if ($fileinfo = getimagesize($imageUrl)) {


                                    # 이미지 다운로드
                                    $imageFile = $this->extract_html($imageUrl);

                                    # 파일 생성 후 저장
                                    $filetemp = fopen($imageName, 'w');
                                    fwrite($filetemp, $imageFile['content']);
                                    fclose($filetemp); // Closing file handle

                                    $file_error = '';
                                    $uploadfiledata = array();
                                    $uploadfiledata2 = array();

                                    $this->load->library('upload');
                                    
                                    $upload_path = config_item('uploads_dir') . '/cmallitem/';
                                    if (is_dir($upload_path) === false) {
                                        mkdir($upload_path, 0707);
                                        $file = $upload_path . 'index.php';
                                        $f = @fopen($file, 'w');
                                        @fwrite($f, '');
                                        @fclose($f);
                                        @chmod($file, 0644);
                                    }
                                    $upload_path .= cdate('Y') . '/';
                                    if (is_dir($upload_path) === false) {
                                        mkdir($upload_path, 0707);
                                        $file = $upload_path . 'index.php';
                                        $f = @fopen($file, 'w');
                                        @fwrite($f, '');
                                        @fclose($f);
                                        @chmod($file, 0644);
                                    }
                                    $upload_path .= cdate('m') . '/';
                                    if (is_dir($upload_path) === false) {
                                        mkdir($upload_path, 0707);
                                        $file = $upload_path . 'index.php';
                                        $f = @fopen($file, 'w');
                                        @fwrite($f, '');
                                        @fclose($f);
                                        @chmod($file, 0644);
                                    }

                                    $uploadconfig = array();
                                    $uploadconfig['upload_path'] = $upload_path;
                                    $uploadconfig['allowed_types'] = '*';
                                    $uploadconfig['max_size'] = 2 * 1024;
                                    $uploadconfig['encrypt_name'] = true;

                                    $this->upload->initialize($uploadconfig);
                                    $_FILES['userfile']['name'] = $imageName;
                                    $_FILES['userfile']['type'] = $fileinfo['2'];
                                    $_FILES['userfile']['tmp_name'] = $imageName;
                                    $_FILES['userfile']['error'] = 0;
                                    $_FILES['userfile']['size'] = $fileinfo['bits'];

                                    if ($this->upload->do_upload('userfile','crawl')) {
                                        $filedata = $this->upload->data();


                                        @unlink($imageName);

                                        $i=1;
                                        $uploadfiledata[$i] = array();
                                        $uploadfiledata[$i]['cfi_filename'] = cdate('Y') . '/' . cdate('m') . '/' . element('file_name', $filedata);
                                        $uploadfiledata[$i]['cfi_originname'] = element('orig_name', $filedata);
                                        $uploadfiledata[$i]['cfi_filesize'] = intval(element('file_size', $filedata) * 1024);
                                        $uploadfiledata[$i]['cfi_width'] = element('image_width', $filedata) ? element('image_width', $filedata) : 0;
                                        $uploadfiledata[$i]['cfi_height'] = element('image_height', $filedata) ? element('image_height', $filedata) : 0;
                                        $uploadfiledata[$i]['cfi_type'] = element('file_type', $filedata);
                                        $uploadfiledata[$i]['is_image'] = element('is_image', $filedata) ? element('is_image', $filedata) : 0;

                                        $upload = $this->aws_s3->upload_file($this->upload->upload_path,$this->upload->file_name,$upload_path,element('file_type', $filedata));       
                                    } else {
                                        $file_error = $this->upload->display_errors();
                                        break;
                                    }


                                    $file_updated = false;
                                    $file_changed = false;
                                    if ($uploadfiledata
                                        && is_array($uploadfiledata)
                                        && count($uploadfiledata) > 0) {
                                        foreach ($uploadfiledata as $pkey => $pval) {
                                           if ($pval) {
                                               $updatedata['cit_file_' . $pkey] = element('cfi_filename', $pval);
                                               $this->detect_label($cit_id,config_item('uploads_dir') . '/cmallitem/' . element('cfi_filename', $pval),$ivalue['crawl_title']);

                                               // if(element('crawl_title',$ivalue) && preg_replace("/[^0-9]*/s", "", element('crawl_price',$ivalue)) && $this->valid_url($board_crawl,$this->http_path_to_url(element('crawl_post_url',$ivalue),element('pln_url', $value))) && element('crawl_goods_code', $ivalue))
                                               //     $updatedata['cit_val1'] = 0 ;
                                               //  else $updatedata['cit_val1'] = 1 ;
                                               
                                           }
                                       }
                                       $this->Cmall_item_model->update($cit_id, $updatedata);
                                        $file_changed = true;
                                    }
                                    
                                }
                                //     && preg_replace("/[^0-9]*/s", "", element('crawl_price',$ivalue)) === element('crawl_price',$c_value)) {
                                //     unset($crawl_out[$c_key]);
                                //     $flag=true;
                                //     break;
                                    

                                // }
                                    
                               
                                
                            }
                        }

                        // print_r($crawl_out);
                        if($cmall_out){
                            foreach ($cmall_out as $o_key => $o_value) {

                                $crawlfilewhere = array(
                                    'cit_id' => element('cit_id', $o_value),
                                );
                                $this->board->delete_cmall(element('cit_id',$o_value));
                            }
                        }
                        $linkupdate = array(
                            'pln_error' => 0,
                        );
                        if(!$is_pln_error)
                            $this->Post_link_model->update(element('pln_id',$value),$linkupdate);
                    } else {
                        continue;    
                    }
                }
            }
        }


        
        $this->crawling_cit_type($post_id,'cit_type3');
        $this->crawling_cit_type($post_id,'cit_type2');
        // redirect(post_url(element('brd_key', $board_crawl),$post_id));
           

       
         

        
         
        //Proxy configuration
        
        
        

        // $html = html_purifier('http://www.hutsandbay.com/product/list-clothing.html?cate_no=62&page=1');

        // $ch = curl_init(); 
        // curl_setopt($ch, CURLOPT_URL, 'http://www.hutsandbay.com/product/list-clothing.html?cate_no=62&page=1'); 
        // curl_setopt($ch, CURLOPT_HEADER, 0); 
        // curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE); 
        // curl_setopt($ch, CURLOPT_FOLLOWLOCATION, TRUE);
        // curl_setopt($ch, CURLOPT_USERAGENT, "Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1)"); 
        
        // $contents = curl_exec($ch); 
        
        // curl_close($ch);

        
        
        // $ch = curl_init();
        // curl_setopt ($ch, CURLOPT_URL, $url);
        // curl_setopt ($ch, CURLOPT_SSL_VERIFYPEER, 0);
        // curl_setopt ($ch, CURLOPT_SSLVERSION,1);
        // curl_setopt ($ch, CURLOPT_HEADER, 0);
        // curl_setopt ($ch, CURLOPT_POST, 0);
        // curl_setopt ($ch, CURLOPT_FOLLOWLOCATION, 1);
        // curl_setopt ($ch, CURLOPT_TIMEOUT, 30);
        // curl_setopt ($ch, CURLOPT_RETURNTRANSFER, 1);
        // $result = curl_exec($ch);
        // curl_close($ch);

        // $fp = fopen("/tmp/loca.jpg", "w"); 
        // $ch = curl_init(); 
        // curl_setopt($ch, CURLOPT_URL, "http://remotedomain.com/image.jpg"); 
        // curl_setopt($ch, CURLOPT_HEADER, 0); 
        // curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); 
        // curl_setopt($ch, CURLOPT_USERAGENT, "Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1)"); 
        // curl_setopt($ch, CURLOPT_FILE, $fp); 
        // curl_exec($ch); 
        // fclose($fp); 
        // curl_close($ch);


        /*
         * 정규식 가져오기 (일부 사이트는 방지가 되어 있을 수 있으니 정규식 지정전에 전체 가져오기를 해보세요)
         */
        // preg_match('/<!doctype html>(.*?)<\/html>/is', $snoopy->results, $html);
        // echo $html[0];

        // $view = array();
        // $view['view'] = array();

        // // 이벤트가 존재하면 실행합니다
        // $view['view']['event']['before'] = Events::trigger('before', $eventname);

        // $where = array(
        //     'brd_search' => 1,
        // );
        // $board_id = $this->Board_model->get_board_list($where);
        // $board_list = array();
        // if ($board_id && is_array($board_id)) {
        //     foreach ($board_id as $key => $val) {
        //         $board_list[] = $this->board->item_all(element('brd_id', $val));
        //     }
        // }
        // $view['view']['board_list'] = $board_list;
        
    }


    function extract_html($url, $proxy='', $proxy_userpwd='') {


        $response = array();
        $response['code']='';
        $response['message']='';
        $response['status']=false;  
        
        $agent = 'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.1) Gecko/20061204 Firefox/2.0.0.1';
        
        // Some websites require referrer
        $host = parse_url($url, PHP_URL_HOST);
        $scheme = parse_url($url, PHP_URL_SCHEME);
        $referrer = $scheme . '://' . $host; 
        
        $curl = curl_init();
        
        curl_setopt($curl, CURLOPT_HEADER, false);
        curl_setopt($curl, CURLOPT_FOLLOWLOCATION, true);
        curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
        curl_setopt ($curl, CURLOPT_POST, 0);
        curl_setopt($curl, CURLOPT_URL, $url);
        // curl_setopt($curl, CURLOPT_PROXY, $proxy);
        // curl_setopt($curl, CURLOPT_PROXYUSERPWD, $proxy_userpwd);
        curl_setopt($curl, CURLOPT_USERAGENT, $agent);
        curl_setopt($curl, CURLOPT_REFERER, $referrer);
        
        // if ( !file_exists(COOKIE_FILENAME) || !is_writable(COOKIE_FILENAME) ) {
        //     $response['status']=false;
        //     $response['message']='Cookie file is missing or not writable.';
        //     return $response;
        // }
     
        // curl_setopt($curl, CURLOPT_COOKIESESSION, 0);
        // curl_setopt($curl, CURLOPT_COOKIEFILE, COOKIE_FILENAME);
        // curl_setopt($curl, CURLOPT_COOKIEJAR, COOKIE_FILENAME);
        
        curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($curl, CURLOPT_CONNECTTIMEOUT, 5);
        
        // allow to crawl https webpages
        curl_setopt($curl,CURLOPT_SSL_VERIFYHOST,0);
        curl_setopt($curl,CURLOPT_SSL_VERIFYPEER,0);
        
        // the download speed must be at least 1 byte per second
        curl_setopt($curl,CURLOPT_LOW_SPEED_LIMIT, 1);
        
        // if the download speed is below 1 byte per second for more than 30 seconds curl will give up
        curl_setopt($curl,CURLOPT_LOW_SPEED_TIME, 30);
        

        

        $content = curl_exec($curl);
        
        $code = curl_getinfo($curl, CURLINFO_HTTP_CODE);
     
        $response['code'] = $code;
        
        if ($content === false) {
            $response['status'] = false;
            $response['content'] = curl_error($curl);
        }
        else{
            $response['status'] = true;
            $response['content'] = $content;
        }
        
        curl_close($curl);
        
        return $response;
        
    }



    public function crawling_cit_type($cit_post_id=0,$cit_type='')
    {



        // 이벤트 라이브러리를 로딩합니다
        $eventname = 'event_crawl_index';
        $this->load->event($eventname);

        $cit_post_id = (int) $cit_post_id;
        if (empty($cit_post_id) OR $cit_post_id < 1) {
            show_404();
        }

        $cit_post = $this->Post_model->get_one($cit_post_id);

        $where = array();

        $this->db->from('post');
        $this->db->where('brd_id', element('brd_id',$cit_post));
        $this->db->group_start();
        if($cit_type === 'cit_type3'){
            $this->db->like('lower(post_title)', '신상');
            $this->db->or_like('lower(post_title)', 'new');            
        } elseif($cit_type === 'cit_type2'){
            $this->db->like('lower(post_title)', '인기');
            $this->db->or_like('lower(post_title)', 'best');            
            $this->db->or_like('lower(post_title)', '베스트');            
        }
        
        $this->db->group_end();
        $res = $this->db->get();
        $result = $res->result_array();
        
        $post_id = element('post_id',element(0,$result));
        $post = $this->Post_model->get_one($post_id);
        if ( ! element('post_id', $post)) {
            show_404();
        }

        $post['extravars'] = $this->Post_extra_vars_model->get_all_meta($post_id);
        $post['meta'] = $this->Post_meta_model->get_all_meta($post_id);
        
        $where = array(
                'post_id' => $cit_post_id,
                );
        $updatedata = array(
            $cit_type => 0,
        );
        $this->Cmall_item_model->update('', $updatedata,$where);

        $crawlwhere = array(
            'brd_id' => element('brd_id', $post),
        );

        $board_crawl = $this->Board_crawl_model->get_one('','',$crawlwhere);
        if ( ! element('brd_id', $board_crawl)) {
            show_404();
        }

        $postwhere = array(
            'post_id' => $post_id,
        );
        $link = $this->Post_link_model
            ->get('', '', $postwhere, '', '', 'pln_id', 'ASC');


        require_once FCPATH . 'plugin/simplehtmldom/simple_html_dom.php';



        foreach ($link as $key => $value) {
            
            
        
            $proxy_userpwd = 'username:password';
            $proxy_userpwd = '';
            $proxies[] = '10.0.0.1:80';
            $proxies[] = '10.0.0.2:8080'; 
            $proxies[] = '10.0.0.3:80'; 
            $proxies[] = '10.0.0.4:8080'; 
            $proxies[] = '10.0.0.5:80'; 


            $proxy_count = count($proxies) - 1;
             

            $proxy = $proxies[rand(0,$proxy_count)];
            $proxy = 0;
             
            
            
            $linkupdate = array(
                'pln_error' => 1,
            );

            $this->Post_link_model->update(element('pln_id',$value),$linkupdate);

            if(element('pln_page', $value)){
                $param =& $this->querystring;

                $pln_url = parse_url(element('pln_url', $value));

                parse_str($pln_url['query'] ,$query_);
                
                
                


                for($page=$query_['page'];element('pln_page', $value) >= $page;$page++){
                    $result = $this->extract_html($pln_url['scheme']."://".$pln_url['host'].$pln_url['path'].'?'.$param->replace('page',$page,$pln_url['query']), $proxy, $proxy_userpwd);

                    if($result['code']===200){

                        // 기존 항목을 모두 지운다.

                        $html = new simple_html_dom();
                        $html->load($result['content']);

                        $crawl_info=array();
                        $crawl_img=array();
                        $is_pln_error=false;



                        if(element('post_content', $post))
                            eval(element('post_content', $post));
                        elseif(element('brd_content', $board_crawl))
                            eval(element('brd_content', $board_crawl));

                        foreach($crawl_info as $ikey => $ivalue){
                            $where = array(
                                    'post_id' => $cit_post_id,
                                    
                                    'cit_goods_code' => element('crawl_goods_code', $ivalue),
                                    );
                            $updatedata = array(
                                $cit_type => 1,
                            );
                            $this->Cmall_item_model->update('', $updatedata,$where);

                            
                            

                        }
                        $linkupdate = array(
                            'pln_error' => 0,
                        );
                        if(!$is_pln_error)
                            $this->Post_link_model->update(element('pln_id',$value),$linkupdate);
                    } else {
                        continue;
                    }
                }
            } else {

                $result = $this->extract_html(element('pln_url', $value), $proxy, $proxy_userpwd);

                if($result['code']===200){

                    // 기존 항목을 모두 지운다.

                    $html = new simple_html_dom();
                    $html->load($result['content']);

                    $crawl_info=array();
                    $crawl_img=array();
                    $is_pln_error=false;



                    if(element('post_content', $post))
                        eval(element('post_content', $post));
                    elseif(element('brd_content', $board_crawl))
                        eval(element('brd_content', $board_crawl));

                    foreach($crawl_info as $ikey => $ivalue){
                        $where = array(
                                'post_id' => $cit_post_id,
                                
                                'cit_goods_code' => element('crawl_goods_code', $ivalue),
                                );
                        $updatedata = array(
                            $cit_type => 1,
                        );
                        $this->Cmall_item_model->update('', $updatedata,$where);

                        
                        

                    }
                    $linkupdate = array(
                        'pln_error' => 0,
                    );
                    if(!$is_pln_error)
                        $this->Post_link_model->update(element('pln_id',$value),$linkupdate);
                } else {
                    continue;
                }
            }
            

        }

            
        // redirect(post_url(element('brd_key', $board_crawl),$post_id));
           

        
         

        
         
        //Proxy configuration
        
        
        

        // $html = html_purifier('http://www.hutsandbay.com/product/list-clothing.html?cate_no=62&page=1');

        // $ch = curl_init(); 
        // curl_setopt($ch, CURLOPT_URL, 'http://www.hutsandbay.com/product/list-clothing.html?cate_no=62&page=1'); 
        // curl_setopt($ch, CURLOPT_HEADER, 0); 
        // curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE); 
        // curl_setopt($ch, CURLOPT_FOLLOWLOCATION, TRUE);
        // curl_setopt($ch, CURLOPT_USERAGENT, "Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1)"); 
        
        // $contents = curl_exec($ch); 
        
        // curl_close($ch);

        
        
        // $ch = curl_init();
        // curl_setopt ($ch, CURLOPT_URL, $url);
        // curl_setopt ($ch, CURLOPT_SSL_VERIFYPEER, 0);
        // curl_setopt ($ch, CURLOPT_SSLVERSION,1);
        // curl_setopt ($ch, CURLOPT_HEADER, 0);
        // curl_setopt ($ch, CURLOPT_POST, 0);
        // curl_setopt ($ch, CURLOPT_FOLLOWLOCATION, 1);
        // curl_setopt ($ch, CURLOPT_TIMEOUT, 30);
        // curl_setopt ($ch, CURLOPT_RETURNTRANSFER, 1);
        // $result = curl_exec($ch);
        // curl_close($ch);

        // $fp = fopen("/tmp/loca.jpg", "w"); 
        // $ch = curl_init(); 
        // curl_setopt($ch, CURLOPT_URL, "http://remotedomain.com/image.jpg"); 
        // curl_setopt($ch, CURLOPT_HEADER, 0); 
        // curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); 
        // curl_setopt($ch, CURLOPT_USERAGENT, "Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1)"); 
        // curl_setopt($ch, CURLOPT_FILE, $fp); 
        // curl_exec($ch); 
        // fclose($fp); 
        // curl_close($ch);


        /*
         * 정규식 가져오기 (일부 사이트는 방지가 되어 있을 수 있으니 정규식 지정전에 전체 가져오기를 해보세요)
         */
        // preg_match('/<!doctype html>(.*?)<\/html>/is', $snoopy->results, $html);
        // echo $html[0];

        // $view = array();
        // $view['view'] = array();

        // // 이벤트가 존재하면 실행합니다
        // $view['view']['event']['before'] = Events::trigger('before', $eventname);

        // $where = array(
        //     'brd_search' => 1,
        // );
        // $board_id = $this->Board_model->get_board_list($where);
        // $board_list = array();
        // if ($board_id && is_array($board_id)) {
        //     foreach ($board_id as $key => $val) {
        //         $board_list[] = $this->board->item_all(element('brd_id', $val));
        //     }
        // }
        // $view['view']['board_list'] = $board_list;
        
        
        
    }


    public function crawling_overwrite($post_id=0)
    {


        // 이벤트 라이브러리를 로딩합니다
        $eventname = 'event_crawl_index';
        $this->load->event($eventname);

        $post_id = (int) $post_id;
        if (empty($post_id) OR $post_id < 1) {
            show_404();
        }

        $post = $this->Post_model->get_one($post_id);
        if ( ! element('post_id', $post)) {
            show_404();
        }

        // if(strstr(strtolower(element('post_title',$post)),'신상') || strstr(strtolower(element('post_title',$post)),'new') || strstr(strtolower(element('post_title',$post)),'best') || strstr(strtolower(element('post_title',$post)),'베스트') || strstr(strtolower(element('post_title',$post)),'추천') || strstr(strtolower(element('post_title',$post)),'인기')) return false ;
        

        $post['extravars'] = $this->Post_extra_vars_model->get_all_meta($post_id);
        $post['meta'] = $this->Post_meta_model->get_all_meta($post_id);

        
        

        
        
        $crawlwhere = array(
            'brd_id' => element('brd_id', $post),
        );

        $board_crawl = $this->Board_crawl_model->get_one('','',$crawlwhere);
        if ( ! element('brd_id', $board_crawl)) {
            show_404();
        }

        
        $postwhere = array(
            'post_id' => $post_id,
        );
        $link = $this->Post_link_model
            ->get('', '', $postwhere, '', '', 'pln_id', 'ASC');


        require_once FCPATH . 'plugin/simplehtmldom/simple_html_dom.php';



        $crawl = $this->Cmall_item_model
            ->get('', '', $postwhere, '', '', 'pln_id', 'ASC');

        foreach ($crawl as $c_key => $c_value) {
            $this->board->delete_cmall(element('cit_id',$c_value));
        }

        foreach ($link as $key => $value) {
            
            
        
            $proxy_userpwd = 'username:password';
            $proxy_userpwd = '';
            $proxies[] = '10.0.0.1:80';
            $proxies[] = '10.0.0.2:8080'; 
            $proxies[] = '10.0.0.3:80'; 
            $proxies[] = '10.0.0.4:8080'; 
            $proxies[] = '10.0.0.5:80'; 


            $proxy_count = count($proxies) - 1;
             

            $proxy = $proxies[rand(0,$proxy_count)];
            $proxy = 0;
             
            
            
            $linkupdate = array(
                'pln_error' => 1,
            );

            $this->Post_link_model->update(element('pln_id',$value),$linkupdate);

            if(element('pln_page', $value)){
                $param =& $this->querystring;

                $pln_url = parse_url(element('pln_url', $value));

                parse_str($pln_url['query'] ,$query_);
                
                
                


                for($page=$query_['page'];element('pln_page', $value) >= $page;$page++){
                    echo $pln_url['scheme']."://".$pln_url['host'].$pln_url['path'].'?'.$param->replace('page',$page,$pln_url['query'])."<br>";
                    $result = $this->extract_html($pln_url['scheme']."://".$pln_url['host'].$pln_url['path'].'?'.$param->replace('page',$page,$pln_url['query']), $proxy, $proxy_userpwd);
                    
                    if($result['code']===200){

                        // 기존 항목을 모두 지운다.
                        
                        

                        $html = new simple_html_dom();
                        $html->load($result['content']);

                        $crawl_info=array();
                        $crawl_img=array();
                        $is_pln_error=false;



                        if(element('post_content', $post))
                            eval(element('post_content', $post));
                        elseif(element('brd_content', $board_crawl))
                            eval(element('brd_content', $board_crawl));
                        



                        
                
                        

                        

                        foreach($crawl_info as $ikey => $ivalue){


                            


                            $updatedata = array(
                                
                                'post_id' => $post_id,
                                'cit_name' => element('crawl_title',$ivalue) ,
                                'cit_summary' => element('crawl_sub_title',$ivalue) ,
                                'cit_price' => preg_replace("/[^0-9]*/s", "", element('crawl_price',$ivalue)) ,
                                'cit_datetime' => cdate('Y-m-d H:i:s'),
                                'cit_updated_datetime' => cdate('Y-m-d H:i:s'),
                                'cit_post_url' => $this->valid_url($board_crawl,$this->http_path_to_url(element('crawl_post_url',$ivalue),element('pln_url', $value))),
                                'brd_id' => element('brd_id', $board_crawl),
                                'pln_id' => element('pln_id', $value),
                                'cit_goods_code' => element('crawl_goods_code', $ivalue),                        
                                'cit_is_soldout' => element('crawl_is_soldout', $ivalue),
                                'cit_status' => 1,
                                
                            );

                            $cit_id = $this->Cmall_item_model->insert($updatedata);

                            

                            

                            
                            $updatedata = array();
                            $updatedata['cit_key'] = 'c_'.$cit_id;
                                    
                            $this->Cmall_item_model->update($cit_id, $updatedata);

                            # 이미지 URL 추출
                            // $imageUrl = $this->http_path_to_url($this->valid_url($board_crawl,$crawl_img[$ikey]['img_src']),element('pln_url', $value));

                            $imageUrl = $this->valid_url($board_crawl,$this->http_path_to_url($crawl_img[$ikey]['img_src'],element('pln_url', $value)));


                            
                            # 이미지 파일명 추출
                            
                            $img_src_array= explode('/', $imageUrl);
                            $imageName = end($img_src_array);
                            
                            
                            # 이미지 파일이 맞는 경우
                            if ($fileinfo = getimagesize($imageUrl)) {


                                # 이미지 다운로드
                                $imageFile = $this->extract_html($imageUrl);

                                # 파일 생성 후 저장
                                $filetemp = fopen($imageName, 'w');
                                fwrite($filetemp, $imageFile['content']);
                                fclose($filetemp); // Closing file handle

                                $file_error = '';
                                $uploadfiledata = array();
                                $uploadfiledata2 = array();

                                $this->load->library('upload');
                                
                                $upload_path = config_item('uploads_dir') . '/cmallitem/';
                                if (is_dir($upload_path) === false) {
                                    mkdir($upload_path, 0707);
                                    $file = $upload_path . 'index.php';
                                    $f = @fopen($file, 'w');
                                    @fwrite($f, '');
                                    @fclose($f);
                                    @chmod($file, 0644);
                                }
                                $upload_path .= cdate('Y') . '/';
                                if (is_dir($upload_path) === false) {
                                    mkdir($upload_path, 0707);
                                    $file = $upload_path . 'index.php';
                                    $f = @fopen($file, 'w');
                                    @fwrite($f, '');
                                    @fclose($f);
                                    @chmod($file, 0644);
                                }
                                $upload_path .= cdate('m') . '/';
                                if (is_dir($upload_path) === false) {
                                    mkdir($upload_path, 0707);
                                    $file = $upload_path . 'index.php';
                                    $f = @fopen($file, 'w');
                                    @fwrite($f, '');
                                    @fclose($f);
                                    @chmod($file, 0644);
                                }

                                $uploadconfig = array();
                                $uploadconfig['upload_path'] = $upload_path;
                                $uploadconfig['allowed_types'] =  '*';
                                $uploadconfig['max_size'] = 2 * 1024;
                                $uploadconfig['encrypt_name'] = true;

                                $this->upload->initialize($uploadconfig);
                                $_FILES['userfile']['name'] = $imageName;
                                $_FILES['userfile']['type'] = $fileinfo['2'];
                                $_FILES['userfile']['tmp_name'] = $imageName;
                                $_FILES['userfile']['error'] = 0;
                                $_FILES['userfile']['size'] = $fileinfo['bits'];

                                if ($this->upload->do_upload('userfile','crawl')) {
                                    $filedata = $this->upload->data();


                                    @unlink($imageName);

                                    $i=1;
                                    $uploadfiledata[$i] = array();
                                    $uploadfiledata[$i]['cfi_filename'] = cdate('Y') . '/' . cdate('m') . '/' . element('file_name', $filedata);
                                    $uploadfiledata[$i]['cfi_originname'] = element('orig_name', $filedata);
                                    $uploadfiledata[$i]['cfi_filesize'] = intval(element('file_size', $filedata) * 1024);
                                    $uploadfiledata[$i]['cfi_width'] = element('image_width', $filedata) ? element('image_width', $filedata) : 0;
                                    $uploadfiledata[$i]['cfi_height'] = element('image_height', $filedata) ? element('image_height', $filedata) : 0;
                                    // $uploadfiledata[$i]['cfi_type'] = str_replace('.', '', element('file_ext', $filedata));

                                    $uploadfiledata[$i]['cfi_type'] = element('file_type', $filedata);                            
                                    $uploadfiledata[$i]['is_image'] = element('is_image', $filedata) ? element('is_image', $filedata) : 0;

                                     $upload = $this->aws_s3->upload_file($this->upload->upload_path,$this->upload->file_name,$upload_path,element('file_type', $filedata));       
                                } else {
                                    $file_error = $this->upload->display_errors();
                                    break;
                                }


                                $file_updated = false;
                                $file_changed = false;
                                $updatedata = array();
                                if ($uploadfiledata
                                    && is_array($uploadfiledata)
                                    && count($uploadfiledata) > 0) {
                                    foreach ($uploadfiledata as $pkey => $pval) {
                                        if ($pval) {
                                            $updatedata['cit_file_' . $pkey] = element('cfi_filename', $pval);
                                            $this->detect_label($cit_id,config_item('uploads_dir') . '/cmallitem/' . element('cfi_filename', $pval),$ivalue['crawl_title']);
                                            
                                            // if(element('crawl_title',$ivalue) && preg_replace("/[^0-9]*/s", "", element('crawl_price',$ivalue)) && $this->valid_url($board_crawl,$this->http_path_to_url(element('crawl_post_url',$ivalue),element('pln_url', $value))) && element('crawl_goods_code', $ivalue))
                                            // $updatedata['cit_val1'] = 0 ;
                                            // else $updatedata['cit_val1'] = 1 ;
                                        }
                                    }

                                   
                                    $this->Cmall_item_model->update($cit_id, $updatedata);
                                    
                                    
                                }
                            }

                        }
                        $linkupdate = array(
                            'pln_error' => 0,
                        );
                        if(!$is_pln_error)
                            $this->Post_link_model->update(element('pln_id',$value),$linkupdate);
                    } else {
                        continue;
                    }
                }
            } else {
                echo element('pln_url', $value)."<br>";
                $result = $this->extract_html(element('pln_url', $value), $proxy, $proxy_userpwd);
                
                if($result['code']===200){

                    // 기존 항목을 모두 지운다.
                    
                    

                    $html = new simple_html_dom();
                    $html->load($result['content']);

                    $crawl_info=array();
                    $crawl_img=array();
                    $is_pln_error=false;



                    // if(element('post_content', $post))
                    //     eval(element('post_content', $post));
                    // elseif(element('brd_content', $board_crawl))
                    //     eval(element('brd_content', $board_crawl));
                    

                    
                    $html_dom = $html->find('div.-items',0);

                if(!$html_dom){
                    log_message('error', '$html_dom post_id:'.$post_id);
                    $is_pln_error=true;
                }

                $i=0;



                if($html_dom->find('div.-item')){
                    foreach($html_dom->find('div.-item') as $gallery) {
                        $iteminfo = array();

                        $crawl_info[$i]['crawl_price'] = '';
                        $crawl_info[$i]['crawl_title'] = '';
                        $crawl_info[$i]['crawl_post_url'] = '';
                        $crawl_info[$i]['crawl_goods_code'] = '';

                        $itemimg = array();

                        $crawl_img[$i]['img_src'] = '';

                        if($gallery->find('div.-name',0))
                          if($gallery->find('div.-name',0)->first_child())                            
                            if($gallery->find('div.-name',0)->first_child()->last_child()->innertext)                            
                              $iteminfo['crawl_title'] = $gallery->find('div.-name',0)->first_child()->last_child()->innertext;

                        if($gallery->find('div.item_info_cont',0))
                          if($gallery->find('div.item_info_cont',0)->first_child()->first_child()->first_child())                            
                            if($gallery->find('div.item_info_cont',0)->first_child()->first_child()->first_child()->next_sibling()->innertext)                            
                              $iteminfo['crawl_sub_title'] = $gallery->find('div.item_info_cont',0)->first_child()->first_child()->first_child()->next_sibling()->innertext;

                         if($gallery->find('div.xans-record-[rel="판매가"]',0))
                          if($gallery->find('div.xans-record-[rel="판매가"]',0)->last_child()->prev_sibling())                            
                            if($gallery->find('div.xans-record-[rel="판매가"]',0)->last_child()->prev_sibling()->innertext)
                              $iteminfo['crawl_price'] = $gallery->find('div.xans-record-[rel="판매가"]',0)->last_child()->prev_sibling()->innertext;


                      
                        
                            

                         if($gallery->find('div.-thumb',0))
                          if($gallery->find('div.-thumb > a',0))
                            if($gallery->find('div.-thumb > a',0)->href)
                                $iteminfo['crawl_post_url'] = $gallery->find('div.-thumb > a',0)->href;

                         if($gallery->find('img.likePrdIcon',0))
                          if($gallery->find('img.likePrdIcon',0)->product_no)                            
                                $iteminfo['crawl_goods_code'] = $gallery->find('img.likePrdIcon',0)->product_no;

                        

                        // if($gallery->find('div.item_icon_box',0))
                        //  if($gallery->find('div.item_icon_box',0)->first_child()->first_child()->next_sibling()->next_sibling()->next_sibling())                            
                        //    if($gallery->find('div.thumb-info',0)->first_child()->first_child()->next_sibling()->next_sibling()->next_sibling()->first_child()->src)
                        // $iteminfo['crawl_is_soldout'] = $gallery->find('div.thumb-info',0)->first_child()->first_child()->next_sibling()->next_sibling()->next_sibling()->first_child()->src;
                        //$iteminfo['crawl_sub_title'] = $gallery->find('span.displaynone',1)->next_sibling()->innertext;
                        $iteminfo['crawl_is_soldout'] = $gallery->find('img.icon_img[alt="품절"]',0) ? 1:0;

            
                        if(!empty($iteminfo['crawl_price'])) {
                            $crawl_info[$i]['crawl_price'] = $iteminfo['crawl_price'];
                        } else {
                            log_message('error', '$crawl_price post_id:'.$post_id);
                            $is_pln_error=true;
                            
                        }

                        if(!empty($iteminfo['crawl_title'])) {
                            $crawl_info[$i]['crawl_title'] = $iteminfo['crawl_title'];
                        } else {
                            log_message('error', '$crawl_title post_id:'.$post_id);
                           $is_pln_error=true;
                        }

                        if(!empty($iteminfo['crawl_sub_title'])) {
                            $crawl_info[$i]['crawl_sub_title'] = $iteminfo['crawl_sub_title'];
                        } else {
                            log_message('error', '$crawl_sub_title post_id:'.$post_id);
                            // $is_pln_error=true;
                        }


                        
                       
                        
                        if(!empty($iteminfo['crawl_post_url'])) {
                        
                            $crawl_info[$i]['crawl_post_url'] = $iteminfo['crawl_post_url'];

                            
                            //$crawl_post_url = parse_url($iteminfo['crawl_post_url']);
                            //parse_str($crawl_post_url['query'],$query_string);
                            
                            
                            
                            
                            
                            
                            
                        } else {
                            log_message('error', '$crawl_post_url post_id:'.$post_id);
                            $is_pln_error=true;
                        }
                        
                        if(!empty($iteminfo['crawl_goods_code'])) {
                            $crawl_info[$i]['crawl_goods_code'] = $iteminfo['crawl_goods_code'];
                        } else {
                            log_message('error', '$crawl_goods_code post_id:'.$post_id);
                           $is_pln_error=true;
                        }

                        if(!empty($iteminfo['crawl_is_soldout'])) {
                            $crawl_info[$i]['crawl_is_soldout'] = 1;

                            
                        } else {
                            log_message('error', '$crawl_is_soldout post_id:'.$post_id);
                            // $is_pln_error=true;
                        }

                        
                        
                        
                        


                        if($gallery->find('img#eListPrdImage'.$iteminfo['crawl_goods_code'].'_1',0))
                            $itemimg['img_src'] = $gallery->find('img#eListPrdImage'.$iteminfo['crawl_goods_code'].'_1',0)->src;

                        if(!empty($itemimg['img_src'])) {
                            $crawl_img[$i]['img_src'] = $itemimg['img_src'];
                        } else {
                            log_message('error', '$img_src post_id:'.$post_id);
                            $is_pln_error=true;
                        }
                        
                        

                        $i++;
                    }
                    
                } else {
                    log_message('error', '$html_dom post_id:'.$post_id);
                    $is_pln_error=true;
                }
                
                    

                    print_r($crawl_img);

                    foreach($crawl_info as $ikey => $ivalue){


                        


                        $updatedata = array(
                            
                            'post_id' => $post_id,
                            'cit_name' => element('crawl_title',$ivalue) ,
                            'cit_summary' => element('crawl_sub_title',$ivalue) ,
                            'cit_price' => preg_replace("/[^0-9]*/s", "", element('crawl_price',$ivalue)) ,
                            'cit_datetime' => cdate('Y-m-d H:i:s'),
                            'cit_updated_datetime' => cdate('Y-m-d H:i:s'),
                            'cit_post_url' => $this->valid_url($board_crawl,$this->http_path_to_url(element('crawl_post_url',$ivalue),element('pln_url', $value))),
                            'brd_id' => element('brd_id', $board_crawl),
                            'pln_id' => element('pln_id', $value),
                            'cit_goods_code' => element('crawl_goods_code', $ivalue),                        
                            'cit_is_soldout' => element('crawl_is_soldout', $ivalue),
                            'cit_status' => 1,
                            
                        );

                        $cit_id = $this->Cmall_item_model->insert($updatedata);
                        $updatedata = array();
                        $updatedata['cit_key'] = 'c_'.$cit_id;
                                
                        $this->Cmall_item_model->update($cit_id, $updatedata);



                        # 이미지 URL 추출
                        // $imageUrl = $this->http_path_to_url($this->valid_url($board_crawl,$crawl_img[$ikey]['img_src']),element('pln_url', $value));

                        $imageUrl = $this->valid_url($board_crawl,$this->http_path_to_url($crawl_img[$ikey]['img_src'],element('pln_url', $value)));


                        
                        # 이미지 파일명 추출
                        
                        $img_src_array= explode('/', $imageUrl);
                        $imageName = end($img_src_array);
                        
                        
                        # 이미지 파일이 맞는 경우
                        if ($fileinfo = getimagesize($imageUrl)) {


                            # 이미지 다운로드
                            $imageFile = $this->extract_html($imageUrl);

                            # 파일 생성 후 저장
                            $filetemp = fopen($imageName, 'w');
                            fwrite($filetemp, $imageFile['content']);
                            fclose($filetemp); // Closing file handle

                            $file_error = '';
                            $uploadfiledata = array();
                            $uploadfiledata2 = array();

                            $this->load->library('upload');
                            
                            $upload_path = config_item('uploads_dir') . '/cmallitem/';
                            if (is_dir($upload_path) === false) {
                                mkdir($upload_path, 0707);
                                $file = $upload_path . 'index.php';
                                $f = @fopen($file, 'w');
                                @fwrite($f, '');
                                @fclose($f);
                                @chmod($file, 0644);
                            }
                            $upload_path .= cdate('Y') . '/';
                            if (is_dir($upload_path) === false) {
                                mkdir($upload_path, 0707);
                                $file = $upload_path . 'index.php';
                                $f = @fopen($file, 'w');
                                @fwrite($f, '');
                                @fclose($f);
                                @chmod($file, 0644);
                            }
                            $upload_path .= cdate('m') . '/';
                            if (is_dir($upload_path) === false) {
                                mkdir($upload_path, 0707);
                                $file = $upload_path . 'index.php';
                                $f = @fopen($file, 'w');
                                @fwrite($f, '');
                                @fclose($f);
                                @chmod($file, 0644);
                            }

                            $uploadconfig = array();
                            $uploadconfig['upload_path'] = $upload_path;
                            $uploadconfig['allowed_types'] =  '*';
                            $uploadconfig['max_size'] = 2 * 1024;
                            $uploadconfig['encrypt_name'] = true;

                            $this->upload->initialize($uploadconfig);
                            $_FILES['userfile']['name'] = $imageName;
                            $_FILES['userfile']['type'] = $fileinfo['2'];
                            $_FILES['userfile']['tmp_name'] = $imageName;
                            $_FILES['userfile']['error'] = 0;
                            $_FILES['userfile']['size'] = $fileinfo['bits'];

                            if ($this->upload->do_upload('userfile','crawl')) {
                                $filedata = $this->upload->data();


                                @unlink($imageName);

                                $i=1;
                                $uploadfiledata[$i] = array();
                                $uploadfiledata[$i]['cfi_filename'] = cdate('Y') . '/' . cdate('m') . '/' . element('file_name', $filedata);
                                $uploadfiledata[$i]['cfi_originname'] = element('orig_name', $filedata);
                                $uploadfiledata[$i]['cfi_filesize'] = intval(element('file_size', $filedata) * 1024);
                                $uploadfiledata[$i]['cfi_width'] = element('image_width', $filedata) ? element('image_width', $filedata) : 0;
                                $uploadfiledata[$i]['cfi_height'] = element('image_height', $filedata) ? element('image_height', $filedata) : 0;
                                // $uploadfiledata[$i]['cfi_type'] = str_replace('.', '', element('file_ext', $filedata));

                                $uploadfiledata[$i]['cfi_type'] = element('file_type', $filedata);                            
                                $uploadfiledata[$i]['is_image'] = element('is_image', $filedata) ? element('is_image', $filedata) : 0;

                                 $upload = $this->aws_s3->upload_file($this->upload->upload_path,$this->upload->file_name,$upload_path,element('file_type', $filedata));       
                            } else {
                                $file_error = $this->upload->display_errors();
                                break;
                            }


                            $file_updated = false;
                            $file_changed = false;
                            $updatedata = array();
                            if ($uploadfiledata
                                && is_array($uploadfiledata)
                                && count($uploadfiledata) > 0) {
                                foreach ($uploadfiledata as $pkey => $pval) {
                                    if ($pval) {
                                        $updatedata['cit_file_' . $pkey] = element('cfi_filename', $pval);
                                        $this->detect_label($cit_id,config_item('uploads_dir') . '/cmallitem/' . element('cfi_filename', $pval),$ivalue['crawl_title']);
                                        
                                        // if(element('crawl_title',$ivalue) && preg_replace("/[^0-9]*/s", "", element('crawl_price',$ivalue)) && $this->valid_url($board_crawl,$this->http_path_to_url(element('crawl_post_url',$ivalue),element('pln_url', $value))) && element('crawl_goods_code', $ivalue))
                                        //     $updatedata['cit_val1'] = 0 ;
                                        // else $updatedata['cit_val1'] = 1 ;
                                    }
                                }
                                
                                $this->Cmall_item_model->update($cit_id, $updatedata);
                                
                            }
                        }

                    }
                    $linkupdate = array(
                        'pln_error' => 0,
                    );
                    if(!$is_pln_error)
                        $this->Post_link_model->update(element('pln_id',$value),$linkupdate);
                } else {
                    continue;
                }
            
            
            }
            

        }

        // $this->crawling_cit_type($post_id,'cit_type3');
        // $this->crawling_cit_type($post_id,'cit_type2');
        // redirect(post_url(element('brd_key', $board),$post_id));
           

        
         

        
         
        //Proxy configuration
        
        
        

        // $html = html_purifier('http://www.hutsandbay.com/product/list-clothing.html?cate_no=62&page=1');

        // $ch = curl_init(); 
        // curl_setopt($ch, CURLOPT_URL, 'http://www.hutsandbay.com/product/list-clothing.html?cate_no=62&page=1'); 
        // curl_setopt($ch, CURLOPT_HEADER, 0); 
        // curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE); 
        // curl_setopt($ch, CURLOPT_FOLLOWLOCATION, TRUE);
        // curl_setopt($ch, CURLOPT_USERAGENT, "Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1)"); 
        
        // $contents = curl_exec($ch); 
        
        // curl_close($ch);

        
        
        // $ch = curl_init();
        // curl_setopt ($ch, CURLOPT_URL, $url);
        // curl_setopt ($ch, CURLOPT_SSL_VERIFYPEER, 0);
        // curl_setopt ($ch, CURLOPT_SSLVERSION,1);
        // curl_setopt ($ch, CURLOPT_HEADER, 0);
        // curl_setopt ($ch, CURLOPT_POST, 0);
        // curl_setopt ($ch, CURLOPT_FOLLOWLOCATION, 1);
        // curl_setopt ($ch, CURLOPT_TIMEOUT, 30);
        // curl_setopt ($ch, CURLOPT_RETURNTRANSFER, 1);
        // $result = curl_exec($ch);
        // curl_close($ch);

        // $fp = fopen("/tmp/loca.jpg", "w"); 
        // $ch = curl_init(); 
        // curl_setopt($ch, CURLOPT_URL, "http://remotedomain.com/image.jpg"); 
        // curl_setopt($ch, CURLOPT_HEADER, 0); 
        // curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); 
        // curl_setopt($ch, CURLOPT_USERAGENT, "Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1)"); 
        // curl_setopt($ch, CURLOPT_FILE, $fp); 
        // curl_exec($ch); 
        // fclose($fp); 
        // curl_close($ch);


        /*
         * 정규식 가져오기 (일부 사이트는 방지가 되어 있을 수 있으니 정규식 지정전에 전체 가져오기를 해보세요)
         */
        // preg_match('/<!doctype html>(.*?)<\/html>/is', $snoopy->results, $html);
        // echo $html[0];

        // $view = array();
        // $view['view'] = array();

        // // 이벤트가 존재하면 실행합니다
        // $view['view']['event']['before'] = Events::trigger('before', $eventname);

        // $where = array(
        //     'brd_search' => 1,
        // );
        // $board_id = $this->Board_model->get_board_list($where);
        // $board_list = array();
        // if ($board_id && is_array($board_id)) {
        //     foreach ($board_id as $key => $val) {
        //         $board_list[] = $this->board->item_all(element('brd_id', $val));
        //     }
        // }
        // $view['view']['board_list'] = $board_list;
        
        
    }
    

    public function crawling_category_update($post_id=0)
    {



        // 이벤트 라이브러리를 로딩합니다
        $eventname = 'event_crawl_index';
        $this->load->event($eventname);

        $post_id = (int) $post_id;
        if (empty($post_id) OR $post_id < 1) {
            show_404();
        }

        $post = $this->Post_model->get_one($post_id);
        if ( ! element('post_id', $post)) {
            show_404();
        }

        // if(strstr(strtolower(element('post_title',$post)),'신상') || strstr(strtolower(element('post_title',$post)),'new') || strstr(strtolower(element('post_title',$post)),'best') || strstr(strtolower(element('post_title',$post)),'베스트') || strstr(strtolower(element('post_title',$post)),'추천') || strstr(strtolower(element('post_title',$post)),'인기')) return false ;
        

        $post['extravars'] = $this->Post_extra_vars_model->get_all_meta($post_id);
        $post['meta'] = $this->Post_meta_model->get_all_meta($post_id);

        $board = $this->board->item_all(element('brd_id', $post));

        $c_category=array();
        $category='';
        $all_category=array();

        $category = $this->Board_group_category_model->get_category_info(element('bgr_id', $board), element('post_category', $post));
        if($category)
            $c_category[] = $category['bca_value'];
        if(element('bca_parent', $category)){
            $category = $this->Board_group_category_model->get_category_info(element('bgr_id', $board), element('bca_parent', $category));    
            $c_category[] = $category['bca_value'];
        }
        if(element('bca_parent', $category)){
            $category = $this->Board_group_category_model->get_category_info(element('bgr_id', $board), element('bca_parent', $category));    
            $c_category[] = $category['bca_value'];
        }
        if(element('bca_parent', $category)){
            $category = $this->Board_group_category_model->get_category_info(element('bgr_id', $board), element('bca_parent', $category));    
            $c_category[] = $category['bca_value'];
        }

        
        
        $all_category = $this->Cmall_category_model->get_all_category();
        
        
        
        
        $crawlwhere = array(
            'brd_id' => element('brd_id', $post),
        );

        $board_crawl = $this->Board_crawl_model->get_one('','',$crawlwhere);
        if ( ! element('brd_id', $board_crawl)) {
            show_404();
        }

        
        $postwhere = array(
            'post_id' => $post_id,
        );
        

        $crawl = $this->Cmall_item_model
            ->get('', '', $postwhere, '', '', 'pln_id', 'ASC');

        foreach ($crawl as $c_key => $c_value) {
            $cmall_category=array();

            $deletewhere = array(
                'cit_id' => element('cit_id',$c_value),
            );
            $this->Cmall_category_rel_model->delete_where($deletewhere);   

            foreach($all_category as $a_cvalue){
                
                foreach($a_cvalue as $a_cvalue_){
                    
                    
                    if(empty(element('cca_text',$a_cvalue_))) continue; 

                    if($this->crawl_title_to_category(element('cca_text',$a_cvalue_),element('cit_name',$c_value))){
                        $cmall_category[element('cca_id',$a_cvalue_)] = element('cca_id',$a_cvalue_);

                        if(element('cca_parent',$a_cvalue_)){
                            $cmall_category[element('cca_parent',$a_cvalue_)] = element('cca_parent',$a_cvalue_);
                            $cmall_category[element('cca_id',$this->Cmall_category_model->get_category_info(element('cca_parent',$a_cvalue_)))] = element('cca_id',$this->Cmall_category_model->get_category_info(element('cca_parent',$a_cvalue_)));
                        }

                        
                    }
                    if(element('cit_summary',$c_value) && $this->crawl_title_to_category(element('cca_text',$a_cvalue_),element('cit_summary',$c_value))){
                        $cmall_category[element('cca_id',$a_cvalue_)] = element('cca_id',$a_cvalue_);

                        if(element('cca_parent',$a_cvalue_)){
                            $cmall_category[element('cca_parent',$a_cvalue_)] = element('cca_parent',$a_cvalue_);
                            $cmall_category[element('cca_id',$this->Cmall_category_model->get_category_info(element('cca_parent',$a_cvalue_)))] = element('cca_id',$this->Cmall_category_model->get_category_info(element('cca_parent',$a_cvalue_)));
                        }
                    }

                                        
                }
                
                
            }
            if($cmall_category){                      
                $this->Cmall_category_rel_model->save_category(element('cit_id',$c_value), $cmall_category);    

            }
            
            

            
            
            foreach($all_category as $a_cvalue2){
                foreach($a_cvalue2 as $a_cvalue2_){
                    if($this->category_check(element('cca_value',$a_cvalue2_),$c_category)){
                        $cmall_category[element('cca_id',$a_cvalue2_)] = element('cca_id',$a_cvalue2_);
                        if(element('cca_parent',$a_cvalue2_)){
                            $cmall_category[element('cca_parent',$a_cvalue2_)] = element('cca_parent',$a_cvalue2_);
                            $cmall_category[element('cca_id',$this->Cmall_category_model->get_category_info(element('cca_parent',$a_cvalue2_)))] = element('cca_id',$this->Cmall_category_model->get_category_info(element('cca_parent',$a_cvalue2_)));
                        }
                    }
                }
            }

            // if($cmall_category)
            //     $this->Cmall_category_rel_model->save_category(element('cit_id',$c_value), $cmall_category);
        }

        
        
        
    }

    public function crawling_tag_update($post_id=0)
    {

        // 이벤트 라이브러리를 로딩합니다
        $eventname = 'event_crawl_index';
        $this->load->event($eventname);

        $post_id = (int) $post_id;
        if (empty($post_id) OR $post_id < 1) {
            show_404();
        }

        $post = $this->Post_model->get_one($post_id);
        if ( ! element('post_id', $post)) {
            show_404();
        }
        

        $post['extravars'] = $this->Post_extra_vars_model->get_all_meta($post_id);
        $post['meta'] = $this->Post_meta_model->get_all_meta($post_id);

        $board = $this->board->item_all(element('brd_id', $post));

        
        $all_category=array();
        
        
        $all_category = $this->Cmall_category_model->get_all_category();
        

        
        
        $crawlwhere = array(
            'brd_id' => element('brd_id', $post),
        );

        $board_crawl = $this->Board_crawl_model->get_one('','',$crawlwhere);
        if ( ! element('brd_id', $board_crawl)) {
            show_404();
        }

        
        $proxy_userpwd = 'username:password';
        $proxy_userpwd = '';
        $proxies[] = '10.0.0.1:80';
        $proxies[] = '10.0.0.2:8080'; 
        $proxies[] = '10.0.0.3:80'; 
        $proxies[] = '10.0.0.4:8080'; 
        $proxies[] = '10.0.0.5:80'; 


        $proxy_count = count($proxies) - 1;
         

        $proxy = $proxies[rand(0,$proxy_count)];
        $proxy = 0;

        $postwhere = array(
            'post_id' => $post_id,
            // 'cit_id' => 6323,
        );
        

        $crawl = $this->Cmall_item_model
            ->get('', '', $postwhere, '', '', 'pln_id', 'asc');


        
        require_once FCPATH . 'plugin/simplehtmldom/simple_html_dom.php';
        $a=0;
        foreach ($crawl as  $value) {
            $tag_ = array();
            echo 'cit_post_url : '.element('cit_post_url', $value)."<br>";
            $result = $this->extract_html(element('cit_post_url', $value), $proxy, $proxy_userpwd);
            
            $linkupdate = array(
                'pln_error' => 2,
            );

            $this->Post_link_model->update(element('pln_id',$value),$linkupdate);

            // $itemupdate = array(
            //     'cit_val1' => 1,
            // );

            // $this->Cmall_item_model->update(element('cit_id',$value),$itemupdate);  
            if($result['code']===200){

                // 기존 항목을 모두 지운다.
                

                $html = new simple_html_dom();
                $html->load($result['content']);

                $cit_info=array();
                $cit_img=array();
                
                $cit_info['crawl_title'] = '';
                $cit_info['crawl_sub_title'] = '';
                $cit_info['crawl_price'] = '';
                $cit_info['crawl_brand'] = '';
                $cit_info['crawl_size'] = '';
                $cit_info['crawl_color'] = '';
                $cit_info['cit_is_soldout'] = '';
                $cit_info['crawl_material'] = '';

                if(element('post_content_detail', $post))
                    eval(element('post_content_detail', $post));
                elseif(element('brd_content_detail', $board_crawl))
                    eval(element('brd_content_detail', $board_crawl));
                
                
                //바잇미
                

                // $html_dom = $html->find('div.janebox',0);

                //  if(!$html_dom){
                //      log_message('error', '$html_dom post_id:'.$post_id);
                     
                //  }
                 
                 
                //  foreach($html_dom->find('tr') as $node){
                    
                //     if(strpos($node->innertext,"제조사") !==false){
                //         $cit_info['crawl_brand'] = str_replace(" ","",str_replace("제조사","",$node->innertext));

                //         break;
                //     }

                //     if(strpos($node->innertext,"브랜드") !==false){
                //         $cit_info['crawl_brand'] = str_replace(" ","",str_replace("브랜드","",$node->innertext));
                //         break;
                //     }

                //  }

               

               //  우프 
                
                
                $cit_info['cit_brand'] = $this->cmall_brand($cit_info['crawl_brand']);
                echo $cit_info['crawl_brand']."<br>";
                echo $cit_info['cit_brand']."<br>";
                if(empty($cit_info['cit_brand'])){
                    $crawl_title_arr = explode(" ",$cit_info['crawl_title']);
                    $cit_info['cit_brand'] = $this->cmall_brand($crawl_title_arr[0].$crawl_title_arr[1]);
                }
                echo $cit_info['crawl_title']."<br>";
                echo $cit_info['cit_brand']."<br>";

                $updatedata = array(                                        
                    
                    'cit_name' => element('crawl_title',$cit_info) ? element('crawl_title',$cit_info) : element('cit_name',$value),
                    'cit_summary' => element('crawl_sub_title',$cit_info) ? element('crawl_sub_title',$cit_info) : element('cit_summary',$value) ,
                    'cit_price' => preg_replace("/[^0-9]*/s", "", element('crawl_price',$cit_info)) ? preg_replace("/[^0-9]*/s", "", element('crawl_price',$cit_info)) : element('cit_price',$value) ,
                    'cit_brand' => element('cit_brand',$cit_info) ? element('cit_brand',$cit_info) : element('cit_brand', $value),
                    'cit_is_soldout' => element('crawl_is_soldout', $cit_info) ? element('crawl_is_soldout', $cit_info) : element('cit_is_soldout', $value),
                    
                );

                

                $this->Cmall_item_model->update(element('cit_id',$value),$updatedata);

                foreach($cit_img as $ikey => $ivalue){


                    


                    



                    # 이미지 URL 추출
                   

                    $imageUrl = $this->valid_url($board_crawl,$this->http_path_to_url($cit_img[$ikey]['img_src'],element('cit_post_url', $value)));


                    
                    # 이미지 파일명 추출
                    
                    $img_src_array= explode('/', $imageUrl);
                    $imageName = end($img_src_array);
                    
                    $imageUrl = str_replace($imageName,rawurlencode($imageName),$imageUrl);
                    echo $imageUrl."<br>";

                    if($this->get_extension($imageName) ==='gif') continue;

                    # 이미지 파일이 맞는 경우
                    if ($fileinfo = getimagesize($imageUrl)) {

                        # 이미지 다운로드
                        $imageFile = $this->extract_html($imageUrl);

                        # 파일 생성 후 저장
                        $filetemp = fopen($imageName, 'w');
                        fwrite($filetemp, $imageFile['content']);
                        fclose($filetemp); // Closing file handle

                        $tag_[] = $this->detect_tag(element('cit_id',$value),$imageName);

                         @unlink($imageName);
                        
                    }
                }
                $a++;
                
                // if($a > 10 ) exit;
            } else {
                continue;
            }
            $translate_text = array();
            foreach($tag_ as $word){
                foreach($word as $val_){                            
                    
                    if(!in_array($val_,$translate_text))
                        array_push($translate_text,$val_);       
                     
                }
            }

            if(count($translate_text)){
                

                
                $deletewhere = array(
                    'cit_id' => element('cit_id',$value),
                );
                $this->Crawl_tag_model->delete_where($deletewhere);            
                if ($translate_text && is_array($translate_text)) {
                    foreach ($translate_text as  $text) {
                        // $value = trim($value);
                        if ($text) {
                            $tagdata = array(
                                'post_id' => element('post_id', $value),
                                'cit_id' => element('cit_id', $value),
                                'brd_id' => element('brd_id', $value),
                                'cta_tag' => $text,
                            );
                            $this->Crawl_tag_model->insert($tagdata);
                        }
                    }
                }
                
            }

            $linkupdate = array(
                'pln_error' => 0,
            );

            $this->Post_link_model->update(element('pln_id',$value),$linkupdate);

            // $itemupdate = array(
            //     'cit_val1' => 0,
            // );
            // if($cit_info['cit_brand'] && (element('crawl_title',$cit_info) || element('cit_name',$value)) && (preg_replace("/[^0-9]*/s", "", element('crawl_price',$cit_info)) || element('cit_price',$value)))
            //     $this->Cmall_item_model->update(element('cit_id',$value),$itemupdate);  
        }


    }
 

    function valid_url($board_crawl = array() , $crawl_url=''){



        $b = parse_url(trim(element('brd_url',$board_crawl)));            
        $c = trim($crawl_url);
        
        

        if(strpos($c,$b['host']) === false ){
            if($this->form_validation->valid_url($c))
                return $c;
            else 
                return element('brd_url',$board_crawl).$c;
        } else {
             return $b['scheme']."://".strstr($c,$b['host']) ;
        }
    }


    function detect_label($cit_id=0,$path='',$crawl_title,$translate=0)
    {

        
        

        if (empty($cit_id) OR $cit_id < 1) {
            show_404();
        }

        $citem = $this->Cmall_item_model->get_one($cit_id);
        if ( ! element('cit_id', $citem)) {
            show_404();
        }

        # Your Google Cloud Platform project ID
        // $projectId = 'petproject-235609';

        # annotate the image
        $image = file_get_contents($path);
        $response = $this->imageAnnotator->labelDetection($image);
        $labels = $response->getLabelAnnotations();
        $translate_text=array();
        $convert_text=array();

        $target = 'ko';

        if ($labels) {
            
            foreach ($labels as $label) {

                if($translate){
                    $translation = $this->translate->translate($label->getDescription(), [
                        'target' => $target
                    ]);
                    
                    array_push($translate_text,$translation['text']);
                
                } else {

                    array_push($translate_text,$label->getDescription());
                }        
            }
            
                
            
        } else {
            return 'No label found';
        }
        
        if(count($translate_text)){
            $deletewhere = array(
                'cit_id' => element('cit_id', $citem),
            );
            $this->Vision_api_label_model->delete_where($deletewhere);            
            if ($translate_text && is_array($translate_text)) {
                foreach ($translate_text as $key => $value) {
                    $value = trim($value);
                    if ($value) {
                        $tagdata = array(
                            'post_id' => element('post_id', $citem),
                            'cit_id' => element('cit_id', $citem),
                            'brd_id' => element('brd_id', $citem),
                            'val_tag' => $value,
                        );
                        $this->Vision_api_label_model->insert($tagdata);
                    }
                }
            }

            // $convert_text = $this->label_tag_convert($translate_text,$crawl_title);
            // $deletewhere = array(
            //     'cit_id' => element('cit_id', $citem),
            // );
            // $this->Crawl_tag_model->delete_where($deletewhere);            
            // if ($convert_text && is_array($convert_text)) {
            //     foreach ($convert_text as $key => $value) {
            //         $value = trim($value);
            //         if ($value) {
            //             $tagdata = array(
            //                 'post_id' => element('post_id', $citem),
            //                 'cit_id' => element('cit_id', $citem),
            //                 'brd_id' => element('brd_id', $citem),
            //                 'cta_tag' => $value,
            //             );
            //             $this->Crawl_tag_model->insert($tagdata);
            //         }
            //     }
            // }
            
        }
        

        $this->imageAnnotator->close();
        
        return $translate_text;



        
    }   


    function detect_tag($cit_id=0,$path='',$crawl_title='',$translate=0)
    {

        
        // $mecab = new \MeCab\Tagger(array('-d', '/usr/local/lib/mecab/dic/mecab-ko-dic'));

        if (empty($cit_id) OR $cit_id < 1) {
            show_404();
        }

        $citem = $this->Cmall_item_model->get_one($cit_id);
        if ( ! element('cit_id', $citem)) {
            show_404();
        }

        # Your Google Cloud Platform project ID
        // $projectId = 'petproject-235609';

        # annotate the image
        $image = file_get_contents($path);

        $response = $this->imageAnnotator->textDetection($image);
        $texts = $response->getTextAnnotations();
        $translate_text=array();
        $convert_text=array();
        $all_category=array();

        $all_category = $this->Cmall_category_model->get_all_category();

        $target = 'ko';

        if ($texts) {
            
             
            
            foreach ($texts as $text) {
                $naturalentity =array();
                $naturalentity_word = '';

                if(strlen($text->getDescription()) < 20) continue;
                
                $language = $this->naturallanguage->analyzeEntities($text->getDescription());

                foreach ($language->entities() as $entity) {
                     $naturalentity[$entity['name']] = $entity['name'];
                }
                
                // foreach ($naturalentity as $val) {

                    

                //     $naturalentity_word .= $val;
                // }

                if($translate){
                    $translation = $this->translate->translate($text->getDescription(), [
                        'target' => $target
                    ]);
                    
                    array_push($translate_text,$translation['text']);
                
                } else {
                    
                    
                    foreach($this->tag_word as $word){
                        foreach ($naturalentity as $val) {
                            // if(strpos(strtolower($val),strtolower(str_replace(" ","",$word))) !== false ){
                            if(strtolower($val) === strtolower(str_replace(" ","",$word))){
                                if(!in_array($word,$translate_text))
                                    array_push($translate_text,$word);       
                            } 
                        }
                    }
                    
                }       

                
               
            }
            
                
            
        } else {
            return 'No label found';
        }
        
        $naturalentity_ =array();
        if(element('cit_name', $citem)){
            $language_ = $this->naturallanguage->analyzeEntities(element('cit_name', $citem));

            foreach ($language_->entities() as $entity) {
                 $naturalentity_[$entity['name']] = $entity['name'];
            }
        }
        
        if(element('cit_summary', $citem)){
            $language_ = $this->naturallanguage->analyzeEntities(element('cit_summary', $citem));

            foreach ($language_->entities() as $entity) {
                 $naturalentity_[$entity['name']] = $entity['name'];
            }
        }

        foreach($this->tag_word as $word){
            foreach ($naturalentity_ as $val) {
                // if(strpos(strtolower($val),strtolower(str_replace(" ","",$word))) !== false ){
                if(strtolower($val) === strtolower(str_replace(" ","",$word))){
                    if(!in_array($word,$translate_text))
                        array_push($translate_text,$word);       
                } 
            }
            
            
        }

        $this->imageAnnotator->close();
        
        return $translate_text;



        
    }   


    function label_tag_convert($cit_id,$translate_text=array(),$crawl_title)
    {



        $this->Crawl_tag_model->get('','',array('cit_id' => $cit_id, 'cta_tag' => 'aaa'));

        $find_letters=array(
                        'aaa' =>array('aaa'=>'aaa'
                                )

                        );
        

        if(strpos($string, $translate_text) !== false)
        {
            echo 'All the letters are found in the string!';
        }       
        
        return $translate_text;



        
    }   

    function getMsgArr($msg) {
       // $convMsg = mb_convert_encoding($msg, "UTF-8", "EUC-KR");

        $convMsg = $msg;
       $resultArr = array();


       $pattern = '/[\x{1100}-\x{11FF}\x{3130}-\x{318F}\x{AC00}-\x{D7AF}a-zA-Z]+/u';
       preg_match_all($pattern,$convMsg,$match);
       // $resultArr[3] = mb_convert_encoding(implode('',$match[0]),"EUC-KR", "UTF-8");
       $resultArr[3] = implode('',$match[0]);

       return $resultArr;
   }

    function http_path_to_url($path, $base_uri) 
    { 
        if (preg_match("@^[a-z]{1}[a-z0-9\+\-\.]+:@i", $path)) return $path; 
        else if ($path=="") return $base_uri; 

        $base_a = parse_url($base_uri); 
        $base_a['shp']  = substr($base_uri, 0, strlen($base_uri) - strlen($base_a['path'].(isset($base_a['query']) ? '?'.$base_a['query'] : '').(isset($base_a['fragment']) ? '#'.$base_a['fragment'] : ''))); 

        if (preg_match("@^//@i", $path)) { 
            return $base_a['scheme'].":".$path; 
        } else if (preg_match("@^\?@", $path)) { 
            return $base_a['shp'].$base_a['path'].$path; 
        } else if (preg_match("@^#@", $path)) { 
            return preg_replace("@#$@", "", substr($base_uri, 0, strlen($base_uri)-strlen($base_a['fragment']))).$path; 
        } else { 
            if (preg_match("@^(/\.+)+@", $path)) { 
                return $base_a['shp'].$path; 
            } else { 
                if ($path[0]!="/" && isset($base_a['path']) && $base_a['path']!='') { 
                    $base_a['file'] = str_replace('/', '', strrchr($base_a['path'], '/')); // 파일명 
                    if (!preg_match("@/@", $base_a['path'])) $base_a['file'] = $base_a['path']; // 파일 만으로 되어 있을 경우 위에서 "/" 검색이 안 되므로 
                    $base_a['dir']  = substr($base_a['path'], 0, strlen($base_a['path']) - strlen($base_a['file'])); // 디렉토리, "/" 포함 
                } 

                // 2007-06 : query에 프로토콜이 있을 경우 parse_url가 제대로 작동하지 않으므로 임시 변환 부분 추가 
                if (preg_match("@[a-z]{1}[a-z0-9\+\-\.]+:[/]{2,}@i", $path)) { 
                    $md5    = md5(microtime()).md5(microtime()); 
                    $path   = str_replace("://", ":__".$md5."__/__/", $path); 
                    $op_a   = parse_url($path); 
                    $op_a['query']  = str_replace(":__".$md5."__/__/", "://", $op_a['query']); 
                    $path   = str_replace(":__".$md5."__/__/", "://", $path); 
                } else { 
                    $op_a   = parse_url($path); 
                } 

                $base_a['dir'] = empty($base_a['dir']) ? '':$base_a['dir'];
                $op_a['path'] = empty($op_a['path']) ? '':$op_a['path'];

                $tp_a   = explode("/", $base_a['dir'].$op_a['path']); 
                $tp_c   = count($tp_a); 
                $ap_a   = array(); 
                for ($i=0; $i < $tp_c; $i++) { 
                    if ($tp_a[$i]=="..") { 
                        if (count($ap_a) >= 1) $ap_a = array_slice($ap_a, 0, count($ap_a)-1); 
                        if ($i==$tp_c-1) $ap_a[] = ""; // 마지막일 경우 
                    } else if ($tp_a[$i]==".") { 
                        if ($i==$tp_c-1) $ap_a[] = ""; // 마지막일 경우 
                    } else { 
                        $ap_a[] = $tp_a[$i]; 
                    } 
                } 

                $ap = implode("/", $ap_a); 
                if (!preg_match("@^/@", $ap)) $ap = "/".$ap; 

                return $base_a['shp'] .$ap .(isset($op_a['query']) ? '?'.$op_a['query'] : '') .(isset($op_a['fragment']) ? '#'.$op_a['fragment'] : ''); 
            } 
        } 
    } 

    
   

    function crawling_checking()
    {}


    function crawling_item_update($crawl_key,$crawl_mode,$crawl_type)
    {   

        if(empty($crawl_key) && empty($crawl_mode) && empty($crawl_type))
            show_404();

        $this->load->model('Board_model');

        switch ($crawl_mode) {
            case 'all':
                $where = array(
                            'brd_search' => 1,
                        );
                break;
            case 'group':
                $where = array(
                            'bgr_id' => $crawl_key,
                        );
                break;
            case 'board':
                $where = array(
                            'brd_id' => $crawl_key,
                        );
                break;
            
            default:
                show_404();
                break;
        }
        
        
        $board_id = $this->Board_model->get_board_list($where);
        $board_list = array();
        if ($board_id && is_array($board_id)) {
            foreach ($board_id as $key => $val) {

                $where = array(
                    'brd_id' => element('brd_id', $val),
                );
                $where['post_del <>'] = 2;
                

                
                $result = $this->Post_model
                    ->get_post_list('', '', $where);                

                if (element('list', $result)) {
                    foreach (element('list', $result) as $key => $val) {
                        if($crawl_type==='update'){
                            $this->crawling_update(element('post_id', $val));
                        } 

                        if($crawl_type==='overwrite'){
                            $this->crawling_overwrite(element('post_id', $val));
                        }
                    }
                }
            }
        }
    }

    function category_check($value,$array)
    {   
        $v_arr = explode('/',$value);

        foreach($v_arr as $v){            
            if(in_array($v,$array))
                return true;
        }
        

    }

    function crawl_title_to_category($value,$string)
    {   
        $v_arr = explode(',',$value);

        foreach($v_arr as $v){            
            if(strpos($string,$v) !== false)
                return true;
        }
        

    }

    function cmall_brand($brand_word)
    {   

        // $brand_word = strtolower(str_replace(" ","",$brand_word));
        $result = $this->Cmall_brand_model->get();
        if($brand_word){
            foreach($result as $value){
                

                // if(element('cbr_value_en',$value) && strpos($brand_word,str_replace(" ","",strtolower(element('cbr_value_en',$value))))!== false)
                //     return element('cbr_id',$value);
                // if(element('cbr_value_kr',$value) && strpos($brand_word,str_replace(" ","",element('cbr_value_kr',$value)))!== false)
                //     return element('cbr_id',$value);
                // if(element('cbr_value_kr',$value) && strpos(str_replace(" ","",element('cbr_value_kr',$value)),$brand_word)!== false)
                //     return element('cbr_id',$value);
                // if(element('cbr_value_en',$value) && strpos(str_replace(" ","",strtolower(element('cbr_value_en',$value))),$brand_word) !== false )
                //     return element('cbr_id',$value);

                if(element('cbr_value_en',$value) && strpos(strtolower($brand_word),strtolower(element('cbr_value_en',$value)))!== false)
                    return element('cbr_id',$value);
                if(element('cbr_value_kr',$value) && strpos(strtolower($brand_word),strtolower(element('cbr_value_kr',$value)))!== false)
                    return element('cbr_id',$value);
                if(element('cbr_value_kr',$value) && strpos(strtolower(element('cbr_value_kr',$value)),strtolower($brand_word))!== false)
                    return element('cbr_id',$value);
                if(element('cbr_value_en',$value) && strpos(strtolower(element('cbr_value_en',$value)),strtolower($brand_word)) !== false )
                    return element('cbr_id',$value);
            }
        }

         
        
    }

    public function get_extension($filename)
    {
        $x = explode('.', $filename);

        if (count($x) === 1)
        {
              return '';
        }

        $ext = end($x);
        return $ext;
    }
    
}
